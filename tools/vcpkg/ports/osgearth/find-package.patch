diff --git a/CMakeLists.txt b/CMakeLists.txt
index dee8b6294..03b71c129 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -107,33 +107,50 @@ mark_as_advanced(OSGEARTH_INSTALL_SHADERS)
 
 # Update git submodules
 # https://cliutils.gitlab.io/modern-cmake/chapters/projects/submodule.html
-find_package(Git QUIET)
-if(GIT_FOUND AND EXISTS "${PROJECT_SOURCE_DIR}/.git")
-    message(STATUS "Submodule update")
-    execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive
-                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
-                    RESULT_VARIABLE GIT_SUBMOD_RESULT)
-    if(NOT GIT_SUBMOD_RESULT EQUAL "0")
-        message(FATAL_ERROR "git submodule update --init --recursive failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
-    endif()
-endif()
+#find_package(Git QUIET)
+#if(GIT_FOUND AND EXISTS "${PROJECT_SOURCE_DIR}/.git")
+#    message(STATUS "Submodule update")
+#    execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive
+#                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+#                    RESULT_VARIABLE GIT_SUBMOD_RESULT)
+#    if(NOT GIT_SUBMOD_RESULT EQUAL "0")
+#        message(FATAL_ERROR "git submodule update --init --recursive failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
+#    endif()
+#endif()
 
 # required
 find_package(OpenGL REQUIRED)
-find_package(OSG REQUIRED)
+find_package(OSG NAMES unofficial-osg)
+find_path(OSG_INCLUDE_DIR osg/Version) # For detecting the version and setting the plugin path
+set(OSG_INCLUDE_DIRS "")
+set(OSG_LIBRARY unofficial::osg::osg)
+set(OSGUTIL_LIBRARY unofficial::osg::osgUtil)
+set(OSGDB_LIBRARY unofficial::osg::osgDB)
+set(OSGTEXT_LIBRARY unofficial::osg::osgText)
+set(OSGSIM_LIBRARY unofficial::osg::osgSim)
+set(OSGVIEWER_LIBRARY unofficial::osg::osgViewer)
+set(OSGGA_LIBRARY unofficial::osg::osgViewer)
+set(OSGSHADOW_LIBRARY unofficial::osg::osgShadow)
+set(OSGMANIPULATOR_LIBRARY unofficial::osg::osgManipulator)
+set(OPENTHREADS_LIBRARY unofficial::osg::OpenThreads)
 find_package(CURL REQUIRED)
 find_package(GDAL REQUIRED)
 
 # optional
-find_package(GEOS)
-find_package(Sqlite3)
-find_package(Draco)
-find_package(BASISU)
-find_package(GLEW)
-find_package(Protobuf)
-find_package(WEBP)
-find_package(Blend2D)
-find_package(Blosc)
+find_package(GEOS CONFIG REQUIRED)
+set(GEOS_LIBRARY GEOS::geos_c)
+find_package(SQLITE3 NAMES unofficial-sqlite3 REQUIRED)
+set(SQLITE3_LIBRARY unofficial::sqlite3::sqlite3)
+find_package(Draco REQUIRED)
+find_package(BASISU REQUIRED)
+find_package(GLEW REQUIRED)
+find_package(Protobuf REQUIRED)
+find_package(WEBP NAMES WebP CONFIG REQUIRED)
+set(WEBP_LIBRARY WebP::webp)
+find_package(BLEND2D CONFIG REQUIRED)
+set(BLEND2D_LIBRARY blend2d::blend2d)
+find_package(BLOSC REQUIRED)
+
 find_package(spdlog)
 
 if(OSGEARTH_BUILD_CESIUM_NODEKIT)
@@ -153,7 +170,8 @@ if(OSGEARTH_ENABLE_PROFILING)
 endif()
 
 if(OSGEARTH_BUILD_ZIP_PLUGIN)
-    find_package(LibZip)
+    find_package(LIBZIP CONFIG REQUIRED)
+    set(LIBZIP_LIBRARY libzip::zip)
 endif()
 
 set(WITH_EXTERNAL_DUKTAPE FALSE CACHE BOOL "Use external Duktape instead of inlining it")
@@ -163,7 +181,8 @@ endif(WITH_EXTERNAL_DUKTAPE)
 
 set(WITH_EXTERNAL_TINYXML FALSE CACHE BOOL "Use external TinyXML instead of inlining it")
 if(WITH_EXTERNAL_TINYXML)
-    find_package(TinyXML)
+    find_package(TINYXML NAMES tinyxml REQUIRED)
+    set(TINYXML_LIBRARY unofficial-tinyxml::unofficial-tinyxml)
 endif(WITH_EXTERNAL_TINYXML)
 
 
@@ -178,9 +197,13 @@ if(SQLITE3_FOUND)
 endif(SQLITE3_FOUND)
 
 # DRACO enables geometry compression sometimes used in glTF:
-if(draco_FOUND)
+IF(DRACO_FOUND)
+	set(draco_FOUND TRUE)
+	set(draco_INCLUDE_DIRS ${DRACO_INCLUDE_DIR})
+	set(draco_LIBRARIES ${DRACO_LIBRARY})
+	set(draco_LIBRARY_DIRS ${DRACO_LIBRARY_DIR})
     ADD_DEFINITIONS(-DOSGEARTH_HAVE_DRACO)
-endif(draco_FOUND)
+ENDIF(DRACO_FOUND)
 
 if(Protobuf_FOUND)
     add_definitions(-DOSGEARTH_HAVE_PROTOBUF)
@@ -268,6 +291,7 @@ if(OSGEARTH_BUILD_SHARED_LIBS)
     set(OSGEARTH_DYNAMIC_OR_STATIC "SHARED")
 else()
     set(OSGEARTH_DYNAMIC_OR_STATIC "STATIC")
+	ADD_DEFINITIONS(-DOSGEARTH_LIBRARY_STATIC)
 endif()
 
 
