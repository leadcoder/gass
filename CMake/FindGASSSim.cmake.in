#This file will export:
#GASS_SIM_INCLUDE_DIRS = holding all include dirs are needed for compiling a project using gass sim
#GASS_SIM_LIBRARIES = holding all libraraies that are needed for linking gass sim

#GASS_SIM_BINARIES_REL = holding all shared libraries needed to run debug application using gass sim
#GASS_SIM_BINARIES_DBG = holding all shared libraries needed to run release application using gass sim
#GASS_PLUGIN_BINARIES_REL
#GASS_PLUGIN_BINARIES_DBG 

MACRO(LIST_CONTAINS var value)
  SET(${var})
  FOREACH (value2 ${ARGN})
    IF (${value} STREQUAL ${value2})
      SET(${var} TRUE)
    ENDIF (${value} STREQUAL ${value2})
  ENDFOREACH (value2)
ENDMACRO(LIST_CONTAINS)

find_package(GASSCore)

set(ANGELSCRIPT_DIR   $ENV{ANGELSCRIPT_HOME} CACHE PATH "Angel Script folder")
find_package(AngelScript REQUIRED)

#just append angelscript to core includes 
set(GASS_SIM_INCLUDE_DIRS ${GASS_CORE_INCLUDE_DIRS} ${ANGELSCRIPT_INCLUDE_DIRS})

find_library(GASS_SIM_LIBRARY_RELEASE GASSSim HINTS ${GASS_LIBRARY_DIRS})
find_library(GASS_SIM_LIBRARY_DEBUG GASSSim_d HINTS ${GASS_LIBRARY_DIRS})

#generate out varible for libraries by appending sim and angelscript to core libs
set(GASS_SIM_LIBRARIES optimized ${GASS_SIM_LIBRARY_RELEASE}
	 debug ${GASS_SIM_LIBRARY_DEBUG}
	 ${GASS_CORE_LIBRARIES})

LIST_CONTAINS(USE_EDITOR_MODULE GASSEditorModule ${GASSSim_FIND_COMPONENTS})

if (USE_EDITOR_MODULE)
	find_library(GASS_EDITOR_LIBRARY_RELEASE GASSEditorModule HINTS ${GASS_LIBRARY_DIRS} ${GASS_LIBRARY_DIRS}/release)
	find_library(GASS_EDITOR_LIBRARY_DEBUG GASSEditorModule_d HINTS ${GASS_LIBRARY_DIRS} ${GASS_LIBRARY_DIRS}/debug)
	set(GASS_SIM_LIBRARIES ${GASS_SIM_LIBRARIES} 
				 optimized ${GASS_EDITOR_LIBRARY_RELEASE}
				 debug ${GASS_EDITOR_LIBRARY_DEBUG})
endif()

find_file(GASS_SIM_BINARY_RELEASE NAMES GASSSim${_SHARED_LIB_EXT} HINTS ${GASS_BINARY_DIRS})
find_file(GASS_SIM_BINARY_DEBUG NAMES GASSSim_d${_SHARED_LIB_EXT} HINTS ${GASS_BINARY_DIRS})

#Set GASSSim out binaries
set(GASS_SIM_BINARIES_REL ${GASS_SIM_BINARY_RELEASE} ${GASS_CORE_BINARIES_REL})
set(GASS_SIM_BINARIES_DBG ${GASS_SIM_BINARY_DEBUG} ${GASS_CORE_BINARIES_DBG})
	
#get shared libraries for components
foreach (_COMP_NAME ${GASSSim_FIND_COMPONENTS})
    set(_COMP_NAME_REL GASS_${_COMP_NAME}_REL)
	set(_COMP_NAME_DBG GASS_${_COMP_NAME}_DBG)
	
	find_file(${_COMP_NAME_REL} NAMES ${_COMP_NAME}${_SHARED_LIB_EXT} HINTS ${GASS_BINARY_DIRS})
	find_file(${_COMP_NAME_DBG} NAMES ${_COMP_NAME}_d${_SHARED_LIB_EXT} HINTS ${GASS_BINARY_DIRS})
	if(_COMP_NAME MATCHES "(GASSPlugin)")
	  set(GASS_PLUGIN_BINARIES_REL ${GASS_PLUGIN_BINARIES_REL} ${${_COMP_NAME_REL}})
	  set(GASS_PLUGIN_BINARIES_DBG ${GASS_PLUGIN_BINARIES_DBG} ${${_COMP_NAME_DBG}})
	else() #must be component
	 set(GASS_SIM_BINARIES_REL ${GASS_SIM_BINARIES_REL} ${${_COMP_NAME_REL}})
	 set(GASS_SIM_BINARIES_DBG ${GASS_SIM_BINARIES_DBG} ${${_COMP_NAME_DBG}})
	endif()
endforeach()

if (WIN32) #find third party shared libraries, TODO: support *nix?

	MACRO(gass_find_binaries bin_list out_list prefix suffix search_dirs)
		 FOREACH (bin_file ${${bin_list}})
			 set(_VAR_NAME ${prefix}_${bin_file}_${suffix})
			 find_file(${_VAR_NAME} NAMES ${bin_file} HINTS ${${search_dirs}})
			 set(${out_list} ${${out_list}} ${${_VAR_NAME}})
		 ENDFOREACH ()
	 ENDMACRO()
	
	#check requested components
	LIST_CONTAINS(USE_OGRE_PLUGIN GASSPluginOgre ${GASSSim_FIND_COMPONENTS})
	LIST_CONTAINS(USE_OSG_PLUGIN GASSPluginOSG ${GASSSim_FIND_COMPONENTS})
	LIST_CONTAINS(USE_OIS_PLUGIN GASSPluginOIS ${GASSSim_FIND_COMPONENTS})
	LIST_CONTAINS(USE_PX_PLUGIN GASSPluginPhysX3 ${GASSSim_FIND_COMPONENTS})
	LIST_CONTAINS(USE_OPENAL_PLUGIN GASSPluginOpenAL ${GASSSim_FIND_COMPONENTS})
	
	if(USE_OGRE_PLUGIN)
		set(GASS_PLUGIN_DEP_BINARIES_REL ${GASS_PLUGIN_DEP_BINARIES_REL} @GASS_Ogre_BINARIES_REL@)
		set(GASS_PLUGIN_DEP_BINARIES_DBG ${GASS_PLUGIN_DEP_BINARIES_DBG} @GASS_Ogre_BINARIES_DBG@)
		
		LIST_CONTAINS(USE_ENV_PLUGIN GASSPluginEnvironment ${GASSSim_FIND_COMPONENTS})	
		if(USE_ENV_PLUGIN)
			set(GASS_PLUGIN_DEP_BINARIES_REL ${GASS_PLUGIN_DEP_BINARIES_REL} @GASS_SkyX_BINARIES_REL@)
			set(GASS_PLUGIN_DEP_BINARIES_DBG ${GASS_PLUGIN_DEP_BINARIES_DBG} @GASS_SkyX_BINARIES_DBG@)
		endif()
	endif()
	 
	if(USE_PX_PLUGIN)
	  set(GASS_PLUGIN_DEP_BINARIES_REL ${GASS_PLUGIN_DEP_BINARIES_REL} @GASS_PhysX3_BINARIES_REL@)
	  set(GASS_PLUGIN_DEP_BINARIES_DBG ${GASS_PLUGIN_DEP_BINARIES_DBG} @GASS_PhysX3_BINARIES_DBG@)
	endif()

	if(USE_OIS_PLUGIN)
	  set(GASS_PLUGIN_DEP_BINARIES_REL ${GASS_PLUGIN_DEP_BINARIES_REL} @GASS_OIS_BINARIES_REL@)
	  set(GASS_PLUGIN_DEP_BINARIES_DBG ${GASS_PLUGIN_DEP_BINARIES_DBG} @GASS_OIS_BINARIES_DBG@)
	endif()
	
	if(USE_OPENAL_PLUGIN)
	  set(GASS_PLUGIN_DEP_BINARIES_REL ${GASS_PLUGIN_DEP_BINARIES_REL} @GASS_OpenAL_BINARIES_REL@)
	  set(GASS_PLUGIN_DEP_BINARIES_DBG ${GASS_PLUGIN_DEP_BINARIES_DBG} @GASS_OpenAL_BINARIES_DBG@)
	endif()
	 
	
	if(USE_OSG_PLUGIN)
	  set(GASS_PLUGIN_DEP_BINARIES_REL ${GASS_PLUGIN_DEP_BINARIES_REL} @GASS_OSG_BINARIES_REL@)
	  set(GASS_PLUGIN_DEP_BINARIES_DBG ${GASS_PLUGIN_DEP_BINARIES_DBG} @GASS_OSG_BINARIES_DBG@)
	  
	  #Handle osg plugins
	  set(OSG_VERSION @OSG_VERSION@)
	  set(GASS_OSGPLUGIN_BINARIES_REL @GASS_OSGPLUGIN_BINARIES_REL@)
	  set(GASS_OSGPLUGIN_BINARIES_DBG @GASS_OSGPLUGIN_BINARIES_DBG@)
	  set(OSGPLUGIN_SEARCH_PATH ${GASS_DIR}/bin/release/osgPlugins-${OSG_VERSION} ${GASS_DIR}/bin/debug/osgPlugins-${OSG_VERSION})
	  gass_find_binaries(GASS_OSGPLUGIN_BINARIES_REL OSGPLUGIN_BINARIES_REL OSGPLUGIN REL OSGPLUGIN_SEARCH_PATH)
	  gass_find_binaries(GASS_OSGPLUGIN_BINARIES_DBG OSGPLUGIN_BINARIES_DBG OSGPLUGIN DBG OSGPLUGIN_SEARCH_PATH)
	  
	  LIST_CONTAINS(USE_OSGEARTH_PLUGIN GASSPluginOSGEarth ${GASSSim_FIND_COMPONENTS})
	  if(USE_OSGEARTH_PLUGIN)
		  set(GASS_PLUGIN_DEP_BINARIES_REL ${GASS_PLUGIN_DEP_BINARIES_REL} @GASS_OSGEarth_BINARIES_REL@)
		  set(GASS_PLUGIN_DEP_BINARIES_DBG ${GASS_PLUGIN_DEP_BINARIES_DBG} @GASS_OSGEarth_BINARIES_DBG@)
		  
		  #Handle osgearth plugins
		  set(GASS_OSGEARTHPLUGIN_BINARIES_REL @GASS_OSGEARTHPLUGIN_BINARIES_REL@)
		  set(GASS_OSGEARTHPLUGIN_BINARIES_DBG @GASS_OSGEARTHPLUGIN_BINARIES_DBG@)
		  gass_find_binaries(GASS_OSGEARTHPLUGIN_BINARIES_REL OSGEARTHPLUGIN_BINARIES_REL OSGEARTHPLUGIN REL OSGPLUGIN_SEARCH_PATH)
		  gass_find_binaries(GASS_OSGEARTHPLUGIN_BINARIES_DBG OSGEARTHPLUGIN_BINARIES_DBG OSGEARTHPLUGIN DBG OSGPLUGIN_SEARCH_PATH)
	  endif()
	endif()
	 
	if(USE_MYGUI_PLUGIN)
	  set(GASS_PLUGIN_DEP_BINARIES_REL ${GASS_PLUGIN_DEP_BINARIES_REL} @GASS_MyGUI_BINARIES_REL@)
	  set(GASS_PLUGIN_DEP_BINARIES_DBG ${GASS_PLUGIN_DEP_BINARIES_DBG} @GASS_MyGUI_BINARIES_DBG@)
	endif()
	 
	gass_find_binaries(GASS_PLUGIN_DEP_BINARIES_REL GASS_SIM_BINARIES_REL GASS_DEP REL GASS_BINARY_DIRS)
	gass_find_binaries(GASS_PLUGIN_DEP_BINARIES_DBG GASS_SIM_BINARIES_DBG GASS_DEP DBG GASS_BINARY_DIRS)
	
	# FOREACH (bin_rel ${GASS_PLUGIN_DEP_BINARIES_REL})
		# set(_BIN_NAME_REL GASS_DEP_${bin_rel}_REL)
		# find_file(${_BIN_NAME_REL} NAMES ${bin_rel} HINTS ${GASS_BINARY_DIRS})
		# set(GASS_SIM_BINARIES_REL ${GASS_SIM_BINARIES_REL} ${${_BIN_NAME_REL}})
	# ENDFOREACH ()
	 
	# FOREACH (bin_dbg ${GASS_PLUGIN_DEP_BINARIES_DBG})
		# set(_BIN_NAME_DBG GASS_DEP_${bin_dbg}_DBG)
		# find_file(${_BIN_NAME_DBG} NAMES ${bin_dbg} HINTS ${GASS_BINARY_DIRS})
		# set(GASS_SIM_BINARIES_DBG ${GASS_SIM_BINARIES_DBG} ${${_BIN_NAME_DBG}})
	# ENDFOREACH ()
		
	 #
	
	# if(USE_OGRE_PLUGIN)
	  # find_package(Ogre)
	  # set(OGRE_BINARIES_REL 
		# ${OGRE_BINARY_REL}
		# ${OGRE_Overlay_BINARY_REL}
		# ${OGRE_Paging_BINARY_REL}
		# ${OGRE_Terrain_BINARY_REL}
		# ${OGRE_Plugin_CgProgramManager_REL}
		# ${OGRE_Plugin_OctreeSceneManager_REL}
		# ${OGRE_Plugin_ParticleFX_REL}
		# ${OGRE_RenderSystem_Direct3D9_REL}
		# ${OGRE_RenderSystem_GL_REL}
		# ${OGRE_PLUGIN_DIR_REL}/cg${_SHARED_LIB_EXT})
		
	# set(OGRE_BINARIES_DBG
		# ${OGRE_BINARY_DBG}
		# ${OGRE_Overlay_BINARY_DBG}
		# ${OGRE_Paging_BINARY_DBG}
		# ${OGRE_Terrain_BINARY_DBG}
		# ${OGRE_Plugin_CgProgramManager_DBG}
		# ${OGRE_Plugin_OctreeSceneManager_DBG}
		# ${OGRE_Plugin_ParticleFX_DBG}
		# ${OGRE_RenderSystem_Direct3D9_DBG}
		# ${OGRE_RenderSystem_GL_DBG}
		# ${OGRE_PLUGIN_DIR_DBG}/cg${_SHARED_LIB_EXT})
		# set(GASS_SIM_BINARIES_REL ${GASS_SIM_BINARIES_REL} ${OGRE_BINARIES_REL})
		# set(GASS_SIM_BINARIES_DBG ${GASS_SIM_BINARIES_DBG} ${OGRE_BINARIES_DBG})
	# endif()
	 
	# if(USE_PX_PLUGIN)
	  # set(PHYSX3_INSTALL_DIR $ENV{PHYSX_HOME} CACHE PATH "PhysX folder")
	  # find_package(PhysX3)
	  
	  # set(GASS_SIM_BINARIES_REL ${GASS_SIM_BINARIES_REL} ${PX_BINARIES_REL})
	  # set(GASS_SIM_BINARIES_DBG ${GASS_SIM_BINARIES_DBG} ${PX_BINARIES_DBG})
	# endif()

	# if(USE_OIS_PLUGIN)
	  # #Set OIS directory
	  # set (OIS_DIR $ENV{OIS_HOME})
	  # #get binaries
	  # find_package(OIS)
	  # set(GASS_SIM_BINARIES_REL ${GASS_SIM_BINARIES_REL} ${OIS_BINARY_REL})
	  # set(GASS_SIM_BINARIES_DBG ${GASS_SIM_BINARIES_DBG} ${OIS_BINARY_DBG})
	 # endif()
	 
	 # if(USE_OPENAL_PLUGIN)
	  # set(OPENAL_BIN_DIR  $ENV{OPENALDIR} CACHE PATH "OpenAL bin folder")
	  # find_package(OpenALExt)
	  # set(GASS_SIM_BINARIES_REL ${GASS_SIM_BINARIES_REL} ${OPENAL_BIN_FILES_RELEASE})
	  # set(GASS_SIM_BINARIES_DBG ${GASS_SIM_BINARIES_DBG} ${OPENAL_BIN_FILES_DEBUG})
	 # endif()
	 # if(USE_ENV_PLUGIN)
	  # set(SKYX_DIR   $ENV{SKYX_HOME} CACHE PATH "SkyX home")
	  # find_package(SkyX)
	  # set(GASS_SIM_BINARIES_REL ${GASS_SIM_BINARIES_REL} ${SKYX_BINARY_REL})
	  # set(GASS_SIM_BINARIES_DBG ${GASS_SIM_BINARIES_DBG} ${SKYX_BINARY_DBG})
	 # endif()
	 
	 # if(USE_OSG_PLUGIN)
	  # find_package(OSGExt 3.2.1 REQUIRED osgUtil
										 # osgAnimation
										 # osgDB
										 # osgGA
										 # osgVolume
										 # osgFX
										 # osgText
										 # osgShadow
										 # osgViewer
										 # osgSim
										 # osgTerrain
										 # osgManipulator
										 # osgParticle
										 # osgWidget)
	  # set(GASS_SIM_BINARIES_REL ${GASS_SIM_BINARIES_REL} ${OSG_BINARIES_REL})
	  # set(GASS_SIM_BINARIES_DBG ${GASS_SIM_BINARIES_DBG} ${OSG_BINARIES_DBG})
	 # endif()
	 
	 # if(USE_OSGEARTH_PLUGIN)
	  # find_package(OSGEarthExt)
	  # set(GASS_SIM_BINARIES_REL ${GASS_SIM_BINARIES_REL} ${OSGEARTH_BINARIES_REL})
	  # set(GASS_SIM_BINARIES_DBG ${GASS_SIM_BINARIES_DBG} ${OSGEARTH_BINARIES_DBG})
	 # endif()
	 
	 # if(USE_MYGUI_PLUGIN)
	  # find_package(MyGUI)
	  # set(GASS_SIM_BINARIES_REL ${GASS_SIM_BINARIES_REL} ${MYGUI_BINARIES_REL})
	  # set(GASS_SIM_BINARIES_DBG ${GASS_SIM_BINARIES_DBG} ${MYGUI_BINARIES_DBG})
	 # endif()
endif()
