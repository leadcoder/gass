// Generic Shadow caster material (floating point shadowmap)
vertex_program DepthShadowmap_CasterVP unified
{
	delegate DepthShadowmap_CasterVP_Cg
	delegate DepthShadowmap_CasterVP_HLSL

}

vertex_program DepthShadowmap_CasterVP_HLSL hlsl
{
    source DepthShadowmap.shader
    entry_point casterVP
    target vs_2_0

    //preprocessor_defines LINEAR_RANGE=0

    default_params
    {
      param_named_auto worldViewProj worldviewproj_matrix
	param_named_auto texelOffsets texel_offsets
	//param_named_auto depthRange shadow_scene_depth_range 1
	//param_named_auto depthRange scene_depth_range
    }
}

vertex_program DepthShadowmap_CasterVP_Cg cg
{
    source DepthShadowmap.shader
    entry_point casterVP
    profiles vs_1_1 arbvp1
    //compile_arguments -DLINEAR_RANGE=0

    default_params
    {
        param_named_auto worldViewProj worldviewproj_matrix
	  param_named_auto texelOffsets texel_offsets
	  //param_named_auto depthRange scene_depth_range
    }
}


fragment_program DepthShadowmap_CasterFP unified
{
delegate DepthShadowmap_CasterFP_Cg
	delegate DepthShadowmap_CasterFP_HLSL
	
}


fragment_program DepthShadowmap_CasterFP_HLSL hlsl
{
    source DepthShadowmap.shader
    entry_point casterFP
    target ps_2_0
    //preprocessor_defines LINEAR_RANGE=0

    default_params
    {
		//param_named_auto uProjection projection_matrix
    }
}


fragment_program DepthShadowmap_CasterFP_Cg cg
{
    source DepthShadowmap.shader
    entry_point casterFP
    profiles ps_2_0 arbfp1
    //preprocessor_defines LINEAR_RANGE=0

    default_params
    {
    }
}

material DepthShadowmap_Caster_Float
{
    technique
    {
        pass 
        {
		//alpha_rejection less_equal 128
		//scene_blend alpha_blend
		//scene_blend add
		//depth_write off 
		//depth_check off
		fog_override true

            vertex_program_ref DepthShadowmap_CasterVP
            {
			
            }
            fragment_program_ref DepthShadowmap_CasterFP
            {
            }
        }
    }
}

