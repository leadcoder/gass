/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BaseMessage swig_types[0]
#define SWIGTYPE_p_ClientConnectedMessage swig_types[1]
#define SWIGTYPE_p_ClientConnectedMessagePtr swig_types[2]
#define SWIGTYPE_p_ClientDisconnectedMessage swig_types[3]
#define SWIGTYPE_p_ClientDisconnectedMessagePtr swig_types[4]
#define SWIGTYPE_p_ConnectToServerMessage swig_types[5]
#define SWIGTYPE_p_ConnectToServerMessagePtr swig_types[6]
#define SWIGTYPE_p_DebugPrintMessage swig_types[7]
#define SWIGTYPE_p_DebugPrintMessagePtr swig_types[8]
#define SWIGTYPE_p_IMessage swig_types[9]
#define SWIGTYPE_p_LuaScriptManager swig_types[10]
#define SWIGTYPE_p_MessagePtr swig_types[11]
#define SWIGTYPE_p_PingRequestMessage swig_types[12]
#define SWIGTYPE_p_PingRequestMessagePtr swig_types[13]
#define SWIGTYPE_p_ServerDisconnectedMessage swig_types[14]
#define SWIGTYPE_p_ServerDisconnectedMessagePtr swig_types[15]
#define SWIGTYPE_p_ServerResponseMessage swig_types[16]
#define SWIGTYPE_p_ServerResponseMessagePtr swig_types[17]
#define SWIGTYPE_p_SimEngine swig_types[18]
#define SWIGTYPE_p_SimSystemManager swig_types[19]
#define SWIGTYPE_p_SimSystemManagerPtr swig_types[20]
#define SWIGTYPE_p_StartClientMessage swig_types[21]
#define SWIGTYPE_p_StartClientMessagePtr swig_types[22]
#define SWIGTYPE_p_StartSceanrioRequestMessage swig_types[23]
#define SWIGTYPE_p_StartSceanrioRequestMessagePtr swig_types[24]
#define SWIGTYPE_p_StartServerMessage swig_types[25]
#define SWIGTYPE_p_StartServerMessagePtr swig_types[26]
#define SWIGTYPE_p_StopClientMessage swig_types[27]
#define SWIGTYPE_p_StopClientMessagePtr swig_types[28]
#define SWIGTYPE_p_StopServerMessage swig_types[29]
#define SWIGTYPE_p_StopServerMessagePtr swig_types[30]
#define SWIGTYPE_p_Vec3 swig_types[31]
#define SWIGTYPE_p_double swig_types[32]
#define SWIGTYPE_p_int swig_types[33]
#define SWIGTYPE_p_std__string swig_types[34]
static swig_type_info *swig_types[36];
static swig_module_info swig_module = {swig_types, 35, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "GASS"
#define SWIG_init      luaopen_GASS
#define SWIG_init_user luaopen_GASS_user

#define SWIG_LUACODE   luaopen_GASS_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


//#include "SWIGTest.h"
#include "Sim/SimEngine.h"
//typedef double Float;
using namespace GASS;


	#include <string>


  int SWIG_lua_isnilstring(lua_State *L, int idx) {
    int ret = lua_isstring(L, idx);
    if (!ret)
     ret = lua_isnil(L, idx);
    return ret;
  }


//typedef double Float;


#include "Core/Math/Vector.h"


#include "Core/MessageSystem/IMessage.h"
#include "Sim/Systems/SimSystemMessages.h"
	

	DebugPrintMessage ToDebugPrintMessage(MessagePtr message)
	{
		DebugPrintMessagePtr db_mess = boost::shared_dynamic_cast<DebugPrintMessage>(message);
		DebugPrintMessage ret = *db_mess.get();
		return ret;
	}
	
	ServerResponseMessage ToServerResponseMessage(MessagePtr message)
	{
		ServerResponseMessagePtr db_mess = boost::shared_dynamic_cast<ServerResponseMessage>(message);
		ServerResponseMessage ret = *db_mess.get();
		return ret;
	}
	
	ClientConnectedMessage ToClientConnectedMessage(MessagePtr message)
	{
		ClientConnectedMessagePtr db_mess = boost::shared_dynamic_cast<ClientConnectedMessage>(message);
		ClientConnectedMessage ret = *db_mess.get();
		return ret;
	}
	
	ClientDisconnectedMessage ToClientDisconnectedMessage(MessagePtr message)
	{
		ClientDisconnectedMessagePtr db_mess = boost::shared_dynamic_cast<ClientDisconnectedMessage>(message);
		ClientDisconnectedMessage ret = *db_mess.get();
		return ret;
	}
	
	
	ServerDisconnectedMessage ToServerDisconnectedMessage(MessagePtr message)
	{
		ServerDisconnectedMessagePtr db_mess = boost::shared_dynamic_cast<ServerDisconnectedMessage>(message);
		ServerDisconnectedMessage ret = *db_mess.get();
		return ret;
	}
	
	

#include "Sim/Systems/SimSystemManager.h"
#include "Sim/SimEngine.h"


#include "Sim/Systems/SimSystemManager.h"
#include "Plugins/CEGUI/LuaScriptManager.h"
#include <boost/shared_ptr.hpp>

SWIGINTERN void SimSystemManager_RegisterForSystemMessage(SimSystemManager *self,std::string const &lua_function,MessagePtr message_type){
		LuaScriptManager::Get().RegisterForSystemMessage(lua_function,message_type);
	}

#include "Core/MessageSystem/IMessage.h"
#include "Plugins/CEGUI/LuaScriptManager.h"

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string()\n"
    "    std::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_Vec3_m_UnitX_set(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  
  SWIG_check_num_args("Vec3::m_UnitX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Vec3::m_UnitX",1,"Vec3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3_m_UnitX_set",1,SWIGTYPE_p_Vec3);
  }
  
  Vec3::m_UnitX = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3_m_UnitX_get(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *result = 0 ;
  
  SWIG_check_num_args("Vec3::m_UnitX",0,0)
  result = (Vec3 *)&Vec3::m_UnitX;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Vec3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3_m_UnitY_set(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  
  SWIG_check_num_args("Vec3::m_UnitY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Vec3::m_UnitY",1,"Vec3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3_m_UnitY_set",1,SWIGTYPE_p_Vec3);
  }
  
  Vec3::m_UnitY = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3_m_UnitY_get(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *result = 0 ;
  
  SWIG_check_num_args("Vec3::m_UnitY",0,0)
  result = (Vec3 *)&Vec3::m_UnitY;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Vec3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3_m_UnitZ_set(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  
  SWIG_check_num_args("Vec3::m_UnitZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Vec3::m_UnitZ",1,"Vec3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3_m_UnitZ_set",1,SWIGTYPE_p_Vec3);
  }
  
  Vec3::m_UnitZ = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3_m_UnitZ_get(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *result = 0 ;
  
  SWIG_check_num_args("Vec3::m_UnitZ",0,0)
  result = (Vec3 *)&Vec3::m_UnitZ;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Vec3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Float arg1 ;
  Float arg2 ;
  Float arg3 ;
  Vec3 *result = 0 ;
  
  SWIG_check_num_args("Vec3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Vec3",1,"Float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Vec3",2,"Float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Vec3",3,"Float");
  arg1 = (Float)lua_tonumber(L, 1);
  arg2 = (Float)lua_tonumber(L, 2);
  arg3 = (Float)lua_tonumber(L, 3);
  result = (Vec3 *)new Vec3(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Vec3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *result = 0 ;
  
  SWIG_check_num_args("Vec3",0,0)
  result = (Vec3 *)new Vec3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Vec3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vec3__SWIG_1(L);
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vec3__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Vec3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Vec3(Float,Float,Float)\n"
    "    Vec3()\n");
  lua_error(L);return 0;
}


static int _wrap_Vec3_Set(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  Float arg2 ;
  Float arg3 ;
  Float arg4 ;
  
  SWIG_check_num_args("Set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Set",1,"Vec3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Set",2,"Float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Set",3,"Float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Set",4,"Float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3_Set",1,SWIGTYPE_p_Vec3);
  }
  
  arg2 = (Float)lua_tonumber(L, 2);
  arg3 = (Float)lua_tonumber(L, 3);
  arg4 = (Float)lua_tonumber(L, 4);
  (arg1)->Set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3___add(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  Vec3 *arg2 = 0 ;
  Vec3 result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"Vec3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"Vec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3___add",1,SWIGTYPE_p_Vec3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3___add",2,SWIGTYPE_p_Vec3);
  }
  
  result = ((Vec3 const *)arg1)->operator +((Vec3 const &)*arg2);
  {
    Vec3 * resultptr = new Vec3((const Vec3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Vec3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3___sub(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  Vec3 *arg2 = 0 ;
  Vec3 result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"Vec3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"Vec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3___sub",1,SWIGTYPE_p_Vec3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3___sub",2,SWIGTYPE_p_Vec3);
  }
  
  result = ((Vec3 const *)arg1)->operator -((Vec3 const &)*arg2);
  {
    Vec3 * resultptr = new Vec3((const Vec3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Vec3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3___unm(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  Vec3 result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"Vec3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3___unm",1,SWIGTYPE_p_Vec3);
  }
  
  result = ((Vec3 const *)arg1)->operator -();
  {
    Vec3 * resultptr = new Vec3((const Vec3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Vec3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  Float arg2 ;
  Vec3 result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"Vec3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"Float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3___mul",1,SWIGTYPE_p_Vec3);
  }
  
  arg2 = (Float const)lua_tonumber(L, 2);
  result = ((Vec3 const *)arg1)->operator *(arg2);
  {
    Vec3 * resultptr = new Vec3((const Vec3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Vec3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  Vec3 *arg2 = 0 ;
  Vec3 result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"Vec3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"Vec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3___mul",1,SWIGTYPE_p_Vec3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3___mul",2,SWIGTYPE_p_Vec3);
  }
  
  result = ((Vec3 const *)arg1)->operator *((Vec3 const &)*arg2);
  {
    Vec3 * resultptr = new Vec3((const Vec3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Vec3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Vec3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Vec3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec3___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Vec3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vec3___mul__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vec3___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *(Vec3 const *,Float const)\n"
    "    operator *(Vec3 const *,Vec3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec3___div(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  Vec3 *arg2 = 0 ;
  Vec3 result;
  
  SWIG_check_num_args("operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator /",1,"Vec3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator /",2,"Vec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3___div",1,SWIGTYPE_p_Vec3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3___div",2,SWIGTYPE_p_Vec3);
  }
  
  result = ((Vec3 const *)arg1)->operator /((Vec3 const &)*arg2);
  {
    Vec3 * resultptr = new Vec3((const Vec3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Vec3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3___eq(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  Vec3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"Vec3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"Vec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3___eq",1,SWIGTYPE_p_Vec3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3___eq",2,SWIGTYPE_p_Vec3);
  }
  
  result = (bool)((Vec3 const *)arg1)->operator ==((Vec3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3_SquaredLength(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  Float result;
  
  SWIG_check_num_args("SquaredLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SquaredLength",1,"Vec3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3_SquaredLength",1,SWIGTYPE_p_Vec3);
  }
  
  result = (Float)((Vec3 const *)arg1)->SquaredLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3_Length(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  Float result;
  
  SWIG_check_num_args("Length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Length",1,"Vec3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3_Length",1,SWIGTYPE_p_Vec3);
  }
  
  result = (Float)((Vec3 const *)arg1)->Length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3_Normalize(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  
  SWIG_check_num_args("Normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Normalize",1,"Vec3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3_Normalize",1,SWIGTYPE_p_Vec3);
  }
  
  (arg1)->Normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3_FastNormalize(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  
  SWIG_check_num_args("FastNormalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FastNormalize",1,"Vec3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3_FastNormalize",1,SWIGTYPE_p_Vec3);
  }
  
  (arg1)->FastNormalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3_FastLength(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  Float result;
  
  SWIG_check_num_args("FastLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FastLength",1,"Vec3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3_FastLength",1,SWIGTYPE_p_Vec3);
  }
  
  result = (Float)((Vec3 const *)arg1)->FastLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3_FastInvLength(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  Float result;
  
  SWIG_check_num_args("FastInvLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FastInvLength",1,"Vec3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3_FastInvLength",1,SWIGTYPE_p_Vec3);
  }
  
  result = (Float)((Vec3 const *)arg1)->FastInvLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3_InSphere(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  Vec3 *arg2 = 0 ;
  Float arg3 ;
  bool result;
  
  SWIG_check_num_args("InSphere",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InSphere",1,"Vec3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("InSphere",2,"Vec3 &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("InSphere",3,"Float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3_InSphere",1,SWIGTYPE_p_Vec3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3_InSphere",2,SWIGTYPE_p_Vec3);
  }
  
  arg3 = (Float)lua_tonumber(L, 3);
  result = (bool)((Vec3 const *)arg1)->InSphere(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3_ToString(lua_State* L) {
  int SWIG_arg = 0;
  Vec3 *arg1 = (Vec3 *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("ToString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ToString",1,"Vec3 *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ToString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vec3,0))){
    SWIG_fail_ptr("Vec3_ToString",1,SWIGTYPE_p_Vec3);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (arg1)->ToString((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vec3(void *obj) {
Vec3 *arg1 = (Vec3 *) obj;
delete arg1;
}
static swig_lua_method swig_Vec3_methods[] = {
    {"Set", _wrap_Vec3_Set}, 
    {"__add", _wrap_Vec3___add}, 
    {"__sub", _wrap_Vec3___sub}, 
    {"__unm", _wrap_Vec3___unm}, 
    {"__mul", _wrap_Vec3___mul}, 
    {"__div", _wrap_Vec3___div}, 
    {"__eq", _wrap_Vec3___eq}, 
    {"SquaredLength", _wrap_Vec3_SquaredLength}, 
    {"Length", _wrap_Vec3_Length}, 
    {"Normalize", _wrap_Vec3_Normalize}, 
    {"FastNormalize", _wrap_Vec3_FastNormalize}, 
    {"FastLength", _wrap_Vec3_FastLength}, 
    {"FastInvLength", _wrap_Vec3_FastInvLength}, 
    {"InSphere", _wrap_Vec3_InSphere}, 
    {"ToString", _wrap_Vec3_ToString}, 
    {0,0}
};
static swig_lua_attribute swig_Vec3_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Vec3_bases[] = {0};
static const char *swig_Vec3_base_names[] = {0};
static swig_lua_class _wrap_class_Vec3 = { "Vec3", &SWIGTYPE_p_Vec3,_wrap_new_Vec3, swig_delete_Vec3, swig_Vec3_methods, swig_Vec3_attributes, swig_Vec3_bases, swig_Vec3_base_names };

static int _wrap_new_BaseMessage(lua_State* L) {
  int SWIG_arg = 0;
  BaseMessage *result = 0 ;
  
  SWIG_check_num_args("BaseMessage::BaseMessage",0,0)
  result = (BaseMessage *)new BaseMessage();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseMessage(void *obj) {
BaseMessage *arg1 = (BaseMessage *) obj;
delete arg1;
}
static swig_lua_method swig_BaseMessage_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_BaseMessage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_BaseMessage_bases[] = {0};
static const char *swig_BaseMessage_base_names[] = {0};
static swig_lua_class _wrap_class_BaseMessage = { "BaseMessage", &SWIGTYPE_p_BaseMessage,_wrap_new_BaseMessage, swig_delete_BaseMessage, swig_BaseMessage_methods, swig_BaseMessage_attributes, swig_BaseMessage_bases, swig_BaseMessage_base_names };

static int _wrap_new_DebugPrintMessage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  SenderID arg2 ;
  double arg3 ;
  std::string temp1 ;
  DebugPrintMessage *result = 0 ;
  
  SWIG_check_num_args("DebugPrintMessage",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("DebugPrintMessage",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DebugPrintMessage",2,"SenderID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DebugPrintMessage",3,"double");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  arg2 = (SenderID)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DebugPrintMessage *)new DebugPrintMessage((std::string const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DebugPrintMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DebugPrintMessage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  SenderID arg2 ;
  std::string temp1 ;
  DebugPrintMessage *result = 0 ;
  
  SWIG_check_num_args("DebugPrintMessage",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("DebugPrintMessage",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DebugPrintMessage",2,"SenderID");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  arg2 = (SenderID)lua_tonumber(L, 2);
  result = (DebugPrintMessage *)new DebugPrintMessage((std::string const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DebugPrintMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DebugPrintMessage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  DebugPrintMessage *result = 0 ;
  
  SWIG_check_num_args("DebugPrintMessage",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("DebugPrintMessage",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (DebugPrintMessage *)new DebugPrintMessage((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DebugPrintMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DebugPrintMessage(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DebugPrintMessage__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DebugPrintMessage__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_DebugPrintMessage__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_DebugPrintMessage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DebugPrintMessage(std::string const &,SenderID,double)\n"
    "    DebugPrintMessage(std::string const &,SenderID)\n"
    "    DebugPrintMessage(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DebugPrintMessage_GetText(lua_State* L) {
  int SWIG_arg = 0;
  DebugPrintMessage *arg1 = (DebugPrintMessage *) 0 ;
  std::string result;
  
  SWIG_check_num_args("GetText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetText",1,"DebugPrintMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DebugPrintMessage,0))){
    SWIG_fail_ptr("DebugPrintMessage_GetText",1,SWIGTYPE_p_DebugPrintMessage);
  }
  
  result = ((DebugPrintMessage const *)arg1)->GetText();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DebugPrintMessage(void *obj) {
DebugPrintMessage *arg1 = (DebugPrintMessage *) obj;
delete arg1;
}
static swig_lua_method swig_DebugPrintMessage_methods[] = {
    {"GetText", _wrap_DebugPrintMessage_GetText}, 
    {0,0}
};
static swig_lua_attribute swig_DebugPrintMessage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_DebugPrintMessage_bases[] = {0,0};
static const char *swig_DebugPrintMessage_base_names[] = {"BaseMessage *",0};
static swig_lua_class _wrap_class_DebugPrintMessage = { "DebugPrintMessage", &SWIGTYPE_p_DebugPrintMessage,_wrap_new_DebugPrintMessage, swig_delete_DebugPrintMessage, swig_DebugPrintMessage_methods, swig_DebugPrintMessage_attributes, swig_DebugPrintMessage_bases, swig_DebugPrintMessage_base_names };

static int _wrap_new_MessagePtr(lua_State* L) {
  int SWIG_arg = 0;
  IMessage *arg1 = (IMessage *) 0 ;
  MessagePtr *result = 0 ;
  
  SWIG_check_num_args("MessagePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MessagePtr",1,"IMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IMessage,0))){
    SWIG_fail_ptr("new_MessagePtr",1,SWIGTYPE_p_IMessage);
  }
  
  result = (MessagePtr *)new MessagePtr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MessagePtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MessagePtr(void *obj) {
MessagePtr *arg1 = (MessagePtr *) obj;
delete arg1;
}
static swig_lua_method swig_MessagePtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_MessagePtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_MessagePtr_bases[] = {0};
static const char *swig_MessagePtr_base_names[] = {0};
static swig_lua_class _wrap_class_MessagePtr = { "MessagePtr", &SWIGTYPE_p_MessagePtr,_wrap_new_MessagePtr, swig_delete_MessagePtr, swig_MessagePtr_methods, swig_MessagePtr_attributes, swig_MessagePtr_bases, swig_MessagePtr_base_names };

static int _wrap_new_DebugPrintMessagePtr(lua_State* L) {
  int SWIG_arg = 0;
  DebugPrintMessage *arg1 = (DebugPrintMessage *) 0 ;
  DebugPrintMessagePtr *result = 0 ;
  
  SWIG_check_num_args("DebugPrintMessagePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DebugPrintMessagePtr",1,"DebugPrintMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DebugPrintMessage,0))){
    SWIG_fail_ptr("new_DebugPrintMessagePtr",1,SWIGTYPE_p_DebugPrintMessage);
  }
  
  result = (DebugPrintMessagePtr *)new DebugPrintMessagePtr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DebugPrintMessagePtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DebugPrintMessagePtr(void *obj) {
DebugPrintMessagePtr *arg1 = (DebugPrintMessagePtr *) obj;
delete arg1;
}
static swig_lua_method swig_DebugPrintMessagePtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_DebugPrintMessagePtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_DebugPrintMessagePtr_bases[] = {0};
static const char *swig_DebugPrintMessagePtr_base_names[] = {0};
static swig_lua_class _wrap_class_DebugPrintMessagePtr = { "DebugPrintMessagePtr", &SWIGTYPE_p_DebugPrintMessagePtr,_wrap_new_DebugPrintMessagePtr, swig_delete_DebugPrintMessagePtr, swig_DebugPrintMessagePtr_methods, swig_DebugPrintMessagePtr_attributes, swig_DebugPrintMessagePtr_bases, swig_DebugPrintMessagePtr_base_names };

static int _wrap_new_ClientConnectedMessage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  SenderID arg3 ;
  double arg4 ;
  ClientConnectedMessage *result = 0 ;
  
  SWIG_check_num_args("ClientConnectedMessage",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ClientConnectedMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClientConnectedMessage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ClientConnectedMessage",3,"SenderID");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ClientConnectedMessage",4,"double");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (SenderID)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (ClientConnectedMessage *)new ClientConnectedMessage(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ClientConnectedMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ClientConnectedMessage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  SenderID arg3 ;
  ClientConnectedMessage *result = 0 ;
  
  SWIG_check_num_args("ClientConnectedMessage",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ClientConnectedMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClientConnectedMessage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ClientConnectedMessage",3,"SenderID");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (SenderID)lua_tonumber(L, 3);
  result = (ClientConnectedMessage *)new ClientConnectedMessage(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ClientConnectedMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ClientConnectedMessage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  ClientConnectedMessage *result = 0 ;
  
  SWIG_check_num_args("ClientConnectedMessage",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ClientConnectedMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClientConnectedMessage",2,"int");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  result = (ClientConnectedMessage *)new ClientConnectedMessage(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ClientConnectedMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ClientConnectedMessage(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ClientConnectedMessage__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ClientConnectedMessage__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ClientConnectedMessage__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ClientConnectedMessage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ClientConnectedMessage(std::string const,int,SenderID,double)\n"
    "    ClientConnectedMessage(std::string const,int,SenderID)\n"
    "    ClientConnectedMessage(std::string const,int)\n");
  lua_error(L);return 0;
}


static int _wrap_ClientConnectedMessage_GetClientName(lua_State* L) {
  int SWIG_arg = 0;
  ClientConnectedMessage *arg1 = (ClientConnectedMessage *) 0 ;
  std::string result;
  
  SWIG_check_num_args("GetClientName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetClientName",1,"ClientConnectedMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientConnectedMessage,0))){
    SWIG_fail_ptr("ClientConnectedMessage_GetClientName",1,SWIGTYPE_p_ClientConnectedMessage);
  }
  
  result = (arg1)->GetClientName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ClientConnectedMessage(void *obj) {
ClientConnectedMessage *arg1 = (ClientConnectedMessage *) obj;
delete arg1;
}
static swig_lua_method swig_ClientConnectedMessage_methods[] = {
    {"GetClientName", _wrap_ClientConnectedMessage_GetClientName}, 
    {0,0}
};
static swig_lua_attribute swig_ClientConnectedMessage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ClientConnectedMessage_bases[] = {0,0};
static const char *swig_ClientConnectedMessage_base_names[] = {"BaseMessage *",0};
static swig_lua_class _wrap_class_ClientConnectedMessage = { "ClientConnectedMessage", &SWIGTYPE_p_ClientConnectedMessage,_wrap_new_ClientConnectedMessage, swig_delete_ClientConnectedMessage, swig_ClientConnectedMessage_methods, swig_ClientConnectedMessage_attributes, swig_ClientConnectedMessage_bases, swig_ClientConnectedMessage_base_names };

static int _wrap_new_ClientConnectedMessagePtr(lua_State* L) {
  int SWIG_arg = 0;
  ClientConnectedMessage *arg1 = (ClientConnectedMessage *) 0 ;
  ClientConnectedMessagePtr *result = 0 ;
  
  SWIG_check_num_args("ClientConnectedMessagePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientConnectedMessagePtr",1,"ClientConnectedMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientConnectedMessage,0))){
    SWIG_fail_ptr("new_ClientConnectedMessagePtr",1,SWIGTYPE_p_ClientConnectedMessage);
  }
  
  result = (ClientConnectedMessagePtr *)new ClientConnectedMessagePtr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ClientConnectedMessagePtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ClientConnectedMessagePtr(void *obj) {
ClientConnectedMessagePtr *arg1 = (ClientConnectedMessagePtr *) obj;
delete arg1;
}
static swig_lua_method swig_ClientConnectedMessagePtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ClientConnectedMessagePtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ClientConnectedMessagePtr_bases[] = {0};
static const char *swig_ClientConnectedMessagePtr_base_names[] = {0};
static swig_lua_class _wrap_class_ClientConnectedMessagePtr = { "ClientConnectedMessagePtr", &SWIGTYPE_p_ClientConnectedMessagePtr,_wrap_new_ClientConnectedMessagePtr, swig_delete_ClientConnectedMessagePtr, swig_ClientConnectedMessagePtr_methods, swig_ClientConnectedMessagePtr_attributes, swig_ClientConnectedMessagePtr_bases, swig_ClientConnectedMessagePtr_base_names };

static int _wrap_new_StartServerMessage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  SenderID arg3 ;
  double arg4 ;
  StartServerMessage *result = 0 ;
  
  SWIG_check_num_args("StartServerMessage",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("StartServerMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StartServerMessage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StartServerMessage",3,"SenderID");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("StartServerMessage",4,"double");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (SenderID)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (StartServerMessage *)new StartServerMessage(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StartServerMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StartServerMessage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  SenderID arg3 ;
  StartServerMessage *result = 0 ;
  
  SWIG_check_num_args("StartServerMessage",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("StartServerMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StartServerMessage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StartServerMessage",3,"SenderID");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (SenderID)lua_tonumber(L, 3);
  result = (StartServerMessage *)new StartServerMessage(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StartServerMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StartServerMessage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  StartServerMessage *result = 0 ;
  
  SWIG_check_num_args("StartServerMessage",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("StartServerMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StartServerMessage",2,"int");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  result = (StartServerMessage *)new StartServerMessage(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StartServerMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StartServerMessage(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_StartServerMessage__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_StartServerMessage__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_StartServerMessage__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_StartServerMessage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StartServerMessage(std::string const,int,SenderID,double)\n"
    "    StartServerMessage(std::string const,int,SenderID)\n"
    "    StartServerMessage(std::string const,int)\n");
  lua_error(L);return 0;
}


static int _wrap_StartServerMessage_GetServerName(lua_State* L) {
  int SWIG_arg = 0;
  StartServerMessage *arg1 = (StartServerMessage *) 0 ;
  std::string result;
  
  SWIG_check_num_args("GetServerName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetServerName",1,"StartServerMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartServerMessage,0))){
    SWIG_fail_ptr("StartServerMessage_GetServerName",1,SWIGTYPE_p_StartServerMessage);
  }
  
  result = ((StartServerMessage const *)arg1)->GetServerName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartServerMessage_GetPort(lua_State* L) {
  int SWIG_arg = 0;
  StartServerMessage *arg1 = (StartServerMessage *) 0 ;
  int result;
  
  SWIG_check_num_args("GetPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetPort",1,"StartServerMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartServerMessage,0))){
    SWIG_fail_ptr("StartServerMessage_GetPort",1,SWIGTYPE_p_StartServerMessage);
  }
  
  result = (int)((StartServerMessage const *)arg1)->GetPort();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StartServerMessage(void *obj) {
StartServerMessage *arg1 = (StartServerMessage *) obj;
delete arg1;
}
static swig_lua_method swig_StartServerMessage_methods[] = {
    {"GetServerName", _wrap_StartServerMessage_GetServerName}, 
    {"GetPort", _wrap_StartServerMessage_GetPort}, 
    {0,0}
};
static swig_lua_attribute swig_StartServerMessage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_StartServerMessage_bases[] = {0,0};
static const char *swig_StartServerMessage_base_names[] = {"BaseMessage *",0};
static swig_lua_class _wrap_class_StartServerMessage = { "StartServerMessage", &SWIGTYPE_p_StartServerMessage,_wrap_new_StartServerMessage, swig_delete_StartServerMessage, swig_StartServerMessage_methods, swig_StartServerMessage_attributes, swig_StartServerMessage_bases, swig_StartServerMessage_base_names };

static int _wrap_new_StartServerMessagePtr(lua_State* L) {
  int SWIG_arg = 0;
  StartServerMessage *arg1 = (StartServerMessage *) 0 ;
  StartServerMessagePtr *result = 0 ;
  
  SWIG_check_num_args("StartServerMessagePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartServerMessagePtr",1,"StartServerMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartServerMessage,0))){
    SWIG_fail_ptr("new_StartServerMessagePtr",1,SWIGTYPE_p_StartServerMessage);
  }
  
  result = (StartServerMessagePtr *)new StartServerMessagePtr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StartServerMessagePtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StartServerMessagePtr(void *obj) {
StartServerMessagePtr *arg1 = (StartServerMessagePtr *) obj;
delete arg1;
}
static swig_lua_method swig_StartServerMessagePtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_StartServerMessagePtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_StartServerMessagePtr_bases[] = {0};
static const char *swig_StartServerMessagePtr_base_names[] = {0};
static swig_lua_class _wrap_class_StartServerMessagePtr = { "StartServerMessagePtr", &SWIGTYPE_p_StartServerMessagePtr,_wrap_new_StartServerMessagePtr, swig_delete_StartServerMessagePtr, swig_StartServerMessagePtr_methods, swig_StartServerMessagePtr_attributes, swig_StartServerMessagePtr_bases, swig_StartServerMessagePtr_base_names };

static int _wrap_new_StopServerMessage(lua_State* L) {
  int SWIG_arg = 0;
  StopServerMessage *result = 0 ;
  
  SWIG_check_num_args("StopServerMessage",0,0)
  result = (StopServerMessage *)new StopServerMessage();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StopServerMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StopServerMessage(void *obj) {
StopServerMessage *arg1 = (StopServerMessage *) obj;
delete arg1;
}
static swig_lua_method swig_StopServerMessage_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_StopServerMessage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_StopServerMessage_bases[] = {0,0};
static const char *swig_StopServerMessage_base_names[] = {"BaseMessage *",0};
static swig_lua_class _wrap_class_StopServerMessage = { "StopServerMessage", &SWIGTYPE_p_StopServerMessage,_wrap_new_StopServerMessage, swig_delete_StopServerMessage, swig_StopServerMessage_methods, swig_StopServerMessage_attributes, swig_StopServerMessage_bases, swig_StopServerMessage_base_names };

static int _wrap_new_StopServerMessagePtr(lua_State* L) {
  int SWIG_arg = 0;
  StopServerMessage *arg1 = (StopServerMessage *) 0 ;
  StopServerMessagePtr *result = 0 ;
  
  SWIG_check_num_args("StopServerMessagePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StopServerMessagePtr",1,"StopServerMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StopServerMessage,0))){
    SWIG_fail_ptr("new_StopServerMessagePtr",1,SWIGTYPE_p_StopServerMessage);
  }
  
  result = (StopServerMessagePtr *)new StopServerMessagePtr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StopServerMessagePtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StopServerMessagePtr(void *obj) {
StopServerMessagePtr *arg1 = (StopServerMessagePtr *) obj;
delete arg1;
}
static swig_lua_method swig_StopServerMessagePtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_StopServerMessagePtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_StopServerMessagePtr_bases[] = {0};
static const char *swig_StopServerMessagePtr_base_names[] = {0};
static swig_lua_class _wrap_class_StopServerMessagePtr = { "StopServerMessagePtr", &SWIGTYPE_p_StopServerMessagePtr,_wrap_new_StopServerMessagePtr, swig_delete_StopServerMessagePtr, swig_StopServerMessagePtr_methods, swig_StopServerMessagePtr_attributes, swig_StopServerMessagePtr_bases, swig_StopServerMessagePtr_base_names };

static int _wrap_new_StartClientMessage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  int arg3 ;
  SenderID arg4 ;
  double arg5 ;
  StartClientMessage *result = 0 ;
  
  SWIG_check_num_args("StartClientMessage",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("StartClientMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StartClientMessage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StartClientMessage",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("StartClientMessage",4,"SenderID");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("StartClientMessage",5,"double");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (SenderID)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (StartClientMessage *)new StartClientMessage(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StartClientMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StartClientMessage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  int arg3 ;
  SenderID arg4 ;
  StartClientMessage *result = 0 ;
  
  SWIG_check_num_args("StartClientMessage",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("StartClientMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StartClientMessage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StartClientMessage",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("StartClientMessage",4,"SenderID");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (SenderID)lua_tonumber(L, 4);
  result = (StartClientMessage *)new StartClientMessage(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StartClientMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StartClientMessage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  int arg3 ;
  StartClientMessage *result = 0 ;
  
  SWIG_check_num_args("StartClientMessage",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("StartClientMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StartClientMessage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StartClientMessage",3,"int");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (StartClientMessage *)new StartClientMessage(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StartClientMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StartClientMessage(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_StartClientMessage__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_StartClientMessage__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_StartClientMessage__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_StartClientMessage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StartClientMessage(std::string const,int,int,SenderID,double)\n"
    "    StartClientMessage(std::string const,int,int,SenderID)\n"
    "    StartClientMessage(std::string const,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_StartClientMessage_GetClientName(lua_State* L) {
  int SWIG_arg = 0;
  StartClientMessage *arg1 = (StartClientMessage *) 0 ;
  std::string result;
  
  SWIG_check_num_args("GetClientName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetClientName",1,"StartClientMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartClientMessage,0))){
    SWIG_fail_ptr("StartClientMessage_GetClientName",1,SWIGTYPE_p_StartClientMessage);
  }
  
  result = ((StartClientMessage const *)arg1)->GetClientName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartClientMessage_GetClientPort(lua_State* L) {
  int SWIG_arg = 0;
  StartClientMessage *arg1 = (StartClientMessage *) 0 ;
  int result;
  
  SWIG_check_num_args("GetClientPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetClientPort",1,"StartClientMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartClientMessage,0))){
    SWIG_fail_ptr("StartClientMessage_GetClientPort",1,SWIGTYPE_p_StartClientMessage);
  }
  
  result = (int)((StartClientMessage const *)arg1)->GetClientPort();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartClientMessage_GetServerPort(lua_State* L) {
  int SWIG_arg = 0;
  StartClientMessage *arg1 = (StartClientMessage *) 0 ;
  int result;
  
  SWIG_check_num_args("GetServerPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetServerPort",1,"StartClientMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartClientMessage,0))){
    SWIG_fail_ptr("StartClientMessage_GetServerPort",1,SWIGTYPE_p_StartClientMessage);
  }
  
  result = (int)((StartClientMessage const *)arg1)->GetServerPort();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StartClientMessage(void *obj) {
StartClientMessage *arg1 = (StartClientMessage *) obj;
delete arg1;
}
static swig_lua_method swig_StartClientMessage_methods[] = {
    {"GetClientName", _wrap_StartClientMessage_GetClientName}, 
    {"GetClientPort", _wrap_StartClientMessage_GetClientPort}, 
    {"GetServerPort", _wrap_StartClientMessage_GetServerPort}, 
    {0,0}
};
static swig_lua_attribute swig_StartClientMessage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_StartClientMessage_bases[] = {0,0};
static const char *swig_StartClientMessage_base_names[] = {"BaseMessage *",0};
static swig_lua_class _wrap_class_StartClientMessage = { "StartClientMessage", &SWIGTYPE_p_StartClientMessage,_wrap_new_StartClientMessage, swig_delete_StartClientMessage, swig_StartClientMessage_methods, swig_StartClientMessage_attributes, swig_StartClientMessage_bases, swig_StartClientMessage_base_names };

static int _wrap_new_StartClientMessagePtr(lua_State* L) {
  int SWIG_arg = 0;
  StartClientMessage *arg1 = (StartClientMessage *) 0 ;
  StartClientMessagePtr *result = 0 ;
  
  SWIG_check_num_args("StartClientMessagePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartClientMessagePtr",1,"StartClientMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartClientMessage,0))){
    SWIG_fail_ptr("new_StartClientMessagePtr",1,SWIGTYPE_p_StartClientMessage);
  }
  
  result = (StartClientMessagePtr *)new StartClientMessagePtr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StartClientMessagePtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StartClientMessagePtr(void *obj) {
StartClientMessagePtr *arg1 = (StartClientMessagePtr *) obj;
delete arg1;
}
static swig_lua_method swig_StartClientMessagePtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_StartClientMessagePtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_StartClientMessagePtr_bases[] = {0};
static const char *swig_StartClientMessagePtr_base_names[] = {0};
static swig_lua_class _wrap_class_StartClientMessagePtr = { "StartClientMessagePtr", &SWIGTYPE_p_StartClientMessagePtr,_wrap_new_StartClientMessagePtr, swig_delete_StartClientMessagePtr, swig_StartClientMessagePtr_methods, swig_StartClientMessagePtr_attributes, swig_StartClientMessagePtr_bases, swig_StartClientMessagePtr_base_names };

static int _wrap_new_StopClientMessage(lua_State* L) {
  int SWIG_arg = 0;
  StopClientMessage *result = 0 ;
  
  SWIG_check_num_args("StopClientMessage",0,0)
  result = (StopClientMessage *)new StopClientMessage();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StopClientMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StopClientMessage(void *obj) {
StopClientMessage *arg1 = (StopClientMessage *) obj;
delete arg1;
}
static swig_lua_method swig_StopClientMessage_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_StopClientMessage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_StopClientMessage_bases[] = {0,0};
static const char *swig_StopClientMessage_base_names[] = {"BaseMessage *",0};
static swig_lua_class _wrap_class_StopClientMessage = { "StopClientMessage", &SWIGTYPE_p_StopClientMessage,_wrap_new_StopClientMessage, swig_delete_StopClientMessage, swig_StopClientMessage_methods, swig_StopClientMessage_attributes, swig_StopClientMessage_bases, swig_StopClientMessage_base_names };

static int _wrap_new_StopClientMessagePtr(lua_State* L) {
  int SWIG_arg = 0;
  StopClientMessage *arg1 = (StopClientMessage *) 0 ;
  StopClientMessagePtr *result = 0 ;
  
  SWIG_check_num_args("StopClientMessagePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StopClientMessagePtr",1,"StopClientMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StopClientMessage,0))){
    SWIG_fail_ptr("new_StopClientMessagePtr",1,SWIGTYPE_p_StopClientMessage);
  }
  
  result = (StopClientMessagePtr *)new StopClientMessagePtr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StopClientMessagePtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StopClientMessagePtr(void *obj) {
StopClientMessagePtr *arg1 = (StopClientMessagePtr *) obj;
delete arg1;
}
static swig_lua_method swig_StopClientMessagePtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_StopClientMessagePtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_StopClientMessagePtr_bases[] = {0};
static const char *swig_StopClientMessagePtr_base_names[] = {0};
static swig_lua_class _wrap_class_StopClientMessagePtr = { "StopClientMessagePtr", &SWIGTYPE_p_StopClientMessagePtr,_wrap_new_StopClientMessagePtr, swig_delete_StopClientMessagePtr, swig_StopClientMessagePtr_methods, swig_StopClientMessagePtr_attributes, swig_StopClientMessagePtr_bases, swig_StopClientMessagePtr_base_names };

static int _wrap_new_ServerResponseMessage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  float arg3 ;
  SenderID arg4 ;
  double arg5 ;
  ServerResponseMessage *result = 0 ;
  
  SWIG_check_num_args("ServerResponseMessage",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ServerResponseMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerResponseMessage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ServerResponseMessage",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ServerResponseMessage",4,"SenderID");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ServerResponseMessage",5,"double");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (SenderID)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (ServerResponseMessage *)new ServerResponseMessage(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerResponseMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ServerResponseMessage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  float arg3 ;
  SenderID arg4 ;
  ServerResponseMessage *result = 0 ;
  
  SWIG_check_num_args("ServerResponseMessage",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ServerResponseMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerResponseMessage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ServerResponseMessage",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ServerResponseMessage",4,"SenderID");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (SenderID)lua_tonumber(L, 4);
  result = (ServerResponseMessage *)new ServerResponseMessage(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerResponseMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ServerResponseMessage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  float arg3 ;
  ServerResponseMessage *result = 0 ;
  
  SWIG_check_num_args("ServerResponseMessage",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ServerResponseMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerResponseMessage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ServerResponseMessage",3,"float");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (ServerResponseMessage *)new ServerResponseMessage(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerResponseMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ServerResponseMessage(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ServerResponseMessage__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ServerResponseMessage__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_ServerResponseMessage__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ServerResponseMessage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerResponseMessage(std::string const,int,float,SenderID,double)\n"
    "    ServerResponseMessage(std::string const,int,float,SenderID)\n"
    "    ServerResponseMessage(std::string const,int,float)\n");
  lua_error(L);return 0;
}


static int _wrap_ServerResponseMessage_GetServerName(lua_State* L) {
  int SWIG_arg = 0;
  ServerResponseMessage *arg1 = (ServerResponseMessage *) 0 ;
  std::string result;
  
  SWIG_check_num_args("GetServerName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetServerName",1,"ServerResponseMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerResponseMessage,0))){
    SWIG_fail_ptr("ServerResponseMessage_GetServerName",1,SWIGTYPE_p_ServerResponseMessage);
  }
  
  result = ((ServerResponseMessage const *)arg1)->GetServerName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerResponseMessage_GetServerPort(lua_State* L) {
  int SWIG_arg = 0;
  ServerResponseMessage *arg1 = (ServerResponseMessage *) 0 ;
  int result;
  
  SWIG_check_num_args("GetServerPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetServerPort",1,"ServerResponseMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerResponseMessage,0))){
    SWIG_fail_ptr("ServerResponseMessage_GetServerPort",1,SWIGTYPE_p_ServerResponseMessage);
  }
  
  result = (int)((ServerResponseMessage const *)arg1)->GetServerPort();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ServerResponseMessage_GetServerPingTime(lua_State* L) {
  int SWIG_arg = 0;
  ServerResponseMessage *arg1 = (ServerResponseMessage *) 0 ;
  float result;
  
  SWIG_check_num_args("GetServerPingTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetServerPingTime",1,"ServerResponseMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerResponseMessage,0))){
    SWIG_fail_ptr("ServerResponseMessage_GetServerPingTime",1,SWIGTYPE_p_ServerResponseMessage);
  }
  
  result = (float)((ServerResponseMessage const *)arg1)->GetServerPingTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ServerResponseMessage(void *obj) {
ServerResponseMessage *arg1 = (ServerResponseMessage *) obj;
delete arg1;
}
static swig_lua_method swig_ServerResponseMessage_methods[] = {
    {"GetServerName", _wrap_ServerResponseMessage_GetServerName}, 
    {"GetServerPort", _wrap_ServerResponseMessage_GetServerPort}, 
    {"GetServerPingTime", _wrap_ServerResponseMessage_GetServerPingTime}, 
    {0,0}
};
static swig_lua_attribute swig_ServerResponseMessage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ServerResponseMessage_bases[] = {0,0};
static const char *swig_ServerResponseMessage_base_names[] = {"BaseMessage *",0};
static swig_lua_class _wrap_class_ServerResponseMessage = { "ServerResponseMessage", &SWIGTYPE_p_ServerResponseMessage,_wrap_new_ServerResponseMessage, swig_delete_ServerResponseMessage, swig_ServerResponseMessage_methods, swig_ServerResponseMessage_attributes, swig_ServerResponseMessage_bases, swig_ServerResponseMessage_base_names };

static int _wrap_new_ServerResponseMessagePtr(lua_State* L) {
  int SWIG_arg = 0;
  ServerResponseMessage *arg1 = (ServerResponseMessage *) 0 ;
  ServerResponseMessagePtr *result = 0 ;
  
  SWIG_check_num_args("ServerResponseMessagePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerResponseMessagePtr",1,"ServerResponseMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerResponseMessage,0))){
    SWIG_fail_ptr("new_ServerResponseMessagePtr",1,SWIGTYPE_p_ServerResponseMessage);
  }
  
  result = (ServerResponseMessagePtr *)new ServerResponseMessagePtr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerResponseMessagePtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ServerResponseMessagePtr(void *obj) {
ServerResponseMessagePtr *arg1 = (ServerResponseMessagePtr *) obj;
delete arg1;
}
static swig_lua_method swig_ServerResponseMessagePtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ServerResponseMessagePtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ServerResponseMessagePtr_bases[] = {0};
static const char *swig_ServerResponseMessagePtr_base_names[] = {0};
static swig_lua_class _wrap_class_ServerResponseMessagePtr = { "ServerResponseMessagePtr", &SWIGTYPE_p_ServerResponseMessagePtr,_wrap_new_ServerResponseMessagePtr, swig_delete_ServerResponseMessagePtr, swig_ServerResponseMessagePtr_methods, swig_ServerResponseMessagePtr_attributes, swig_ServerResponseMessagePtr_bases, swig_ServerResponseMessagePtr_base_names };

static int _wrap_new_ConnectToServerMessage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  SenderID arg3 ;
  double arg4 ;
  ConnectToServerMessage *result = 0 ;
  
  SWIG_check_num_args("ConnectToServerMessage",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ConnectToServerMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ConnectToServerMessage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ConnectToServerMessage",3,"SenderID");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ConnectToServerMessage",4,"double");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (SenderID)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (ConnectToServerMessage *)new ConnectToServerMessage(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ConnectToServerMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConnectToServerMessage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  SenderID arg3 ;
  ConnectToServerMessage *result = 0 ;
  
  SWIG_check_num_args("ConnectToServerMessage",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ConnectToServerMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ConnectToServerMessage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ConnectToServerMessage",3,"SenderID");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (SenderID)lua_tonumber(L, 3);
  result = (ConnectToServerMessage *)new ConnectToServerMessage(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ConnectToServerMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConnectToServerMessage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  ConnectToServerMessage *result = 0 ;
  
  SWIG_check_num_args("ConnectToServerMessage",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ConnectToServerMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ConnectToServerMessage",2,"int");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  result = (ConnectToServerMessage *)new ConnectToServerMessage(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ConnectToServerMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConnectToServerMessage(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ConnectToServerMessage__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ConnectToServerMessage__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ConnectToServerMessage__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ConnectToServerMessage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConnectToServerMessage(std::string const,int,SenderID,double)\n"
    "    ConnectToServerMessage(std::string const,int,SenderID)\n"
    "    ConnectToServerMessage(std::string const,int)\n");
  lua_error(L);return 0;
}


static int _wrap_ConnectToServerMessage_GetServerName(lua_State* L) {
  int SWIG_arg = 0;
  ConnectToServerMessage *arg1 = (ConnectToServerMessage *) 0 ;
  std::string result;
  
  SWIG_check_num_args("GetServerName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetServerName",1,"ConnectToServerMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ConnectToServerMessage,0))){
    SWIG_fail_ptr("ConnectToServerMessage_GetServerName",1,SWIGTYPE_p_ConnectToServerMessage);
  }
  
  result = ((ConnectToServerMessage const *)arg1)->GetServerName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectToServerMessage_GetServerPort(lua_State* L) {
  int SWIG_arg = 0;
  ConnectToServerMessage *arg1 = (ConnectToServerMessage *) 0 ;
  int result;
  
  SWIG_check_num_args("GetServerPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetServerPort",1,"ConnectToServerMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ConnectToServerMessage,0))){
    SWIG_fail_ptr("ConnectToServerMessage_GetServerPort",1,SWIGTYPE_p_ConnectToServerMessage);
  }
  
  result = (int)((ConnectToServerMessage const *)arg1)->GetServerPort();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ConnectToServerMessage(void *obj) {
ConnectToServerMessage *arg1 = (ConnectToServerMessage *) obj;
delete arg1;
}
static swig_lua_method swig_ConnectToServerMessage_methods[] = {
    {"GetServerName", _wrap_ConnectToServerMessage_GetServerName}, 
    {"GetServerPort", _wrap_ConnectToServerMessage_GetServerPort}, 
    {0,0}
};
static swig_lua_attribute swig_ConnectToServerMessage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ConnectToServerMessage_bases[] = {0,0};
static const char *swig_ConnectToServerMessage_base_names[] = {"BaseMessage *",0};
static swig_lua_class _wrap_class_ConnectToServerMessage = { "ConnectToServerMessage", &SWIGTYPE_p_ConnectToServerMessage,_wrap_new_ConnectToServerMessage, swig_delete_ConnectToServerMessage, swig_ConnectToServerMessage_methods, swig_ConnectToServerMessage_attributes, swig_ConnectToServerMessage_bases, swig_ConnectToServerMessage_base_names };

static int _wrap_new_ConnectToServerMessagePtr(lua_State* L) {
  int SWIG_arg = 0;
  ConnectToServerMessage *arg1 = (ConnectToServerMessage *) 0 ;
  ConnectToServerMessagePtr *result = 0 ;
  
  SWIG_check_num_args("ConnectToServerMessagePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ConnectToServerMessagePtr",1,"ConnectToServerMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ConnectToServerMessage,0))){
    SWIG_fail_ptr("new_ConnectToServerMessagePtr",1,SWIGTYPE_p_ConnectToServerMessage);
  }
  
  result = (ConnectToServerMessagePtr *)new ConnectToServerMessagePtr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ConnectToServerMessagePtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ConnectToServerMessagePtr(void *obj) {
ConnectToServerMessagePtr *arg1 = (ConnectToServerMessagePtr *) obj;
delete arg1;
}
static swig_lua_method swig_ConnectToServerMessagePtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ConnectToServerMessagePtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ConnectToServerMessagePtr_bases[] = {0};
static const char *swig_ConnectToServerMessagePtr_base_names[] = {0};
static swig_lua_class _wrap_class_ConnectToServerMessagePtr = { "ConnectToServerMessagePtr", &SWIGTYPE_p_ConnectToServerMessagePtr,_wrap_new_ConnectToServerMessagePtr, swig_delete_ConnectToServerMessagePtr, swig_ConnectToServerMessagePtr_methods, swig_ConnectToServerMessagePtr_attributes, swig_ConnectToServerMessagePtr_bases, swig_ConnectToServerMessagePtr_base_names };

static int _wrap_new_ClientDisconnectedMessage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  SenderID arg3 ;
  double arg4 ;
  ClientDisconnectedMessage *result = 0 ;
  
  SWIG_check_num_args("ClientDisconnectedMessage",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ClientDisconnectedMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClientDisconnectedMessage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ClientDisconnectedMessage",3,"SenderID");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ClientDisconnectedMessage",4,"double");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (SenderID)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (ClientDisconnectedMessage *)new ClientDisconnectedMessage(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ClientDisconnectedMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ClientDisconnectedMessage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  SenderID arg3 ;
  ClientDisconnectedMessage *result = 0 ;
  
  SWIG_check_num_args("ClientDisconnectedMessage",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ClientDisconnectedMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClientDisconnectedMessage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ClientDisconnectedMessage",3,"SenderID");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (SenderID)lua_tonumber(L, 3);
  result = (ClientDisconnectedMessage *)new ClientDisconnectedMessage(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ClientDisconnectedMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ClientDisconnectedMessage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  ClientDisconnectedMessage *result = 0 ;
  
  SWIG_check_num_args("ClientDisconnectedMessage",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ClientDisconnectedMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClientDisconnectedMessage",2,"int");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  result = (ClientDisconnectedMessage *)new ClientDisconnectedMessage(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ClientDisconnectedMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ClientDisconnectedMessage(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ClientDisconnectedMessage__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ClientDisconnectedMessage__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ClientDisconnectedMessage__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ClientDisconnectedMessage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ClientDisconnectedMessage(std::string const,int,SenderID,double)\n"
    "    ClientDisconnectedMessage(std::string const,int,SenderID)\n"
    "    ClientDisconnectedMessage(std::string const,int)\n");
  lua_error(L);return 0;
}


static int _wrap_ClientDisconnectedMessage_GetClientName(lua_State* L) {
  int SWIG_arg = 0;
  ClientDisconnectedMessage *arg1 = (ClientDisconnectedMessage *) 0 ;
  std::string result;
  
  SWIG_check_num_args("GetClientName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetClientName",1,"ClientDisconnectedMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientDisconnectedMessage,0))){
    SWIG_fail_ptr("ClientDisconnectedMessage_GetClientName",1,SWIGTYPE_p_ClientDisconnectedMessage);
  }
  
  result = ((ClientDisconnectedMessage const *)arg1)->GetClientName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ClientDisconnectedMessage(void *obj) {
ClientDisconnectedMessage *arg1 = (ClientDisconnectedMessage *) obj;
delete arg1;
}
static swig_lua_method swig_ClientDisconnectedMessage_methods[] = {
    {"GetClientName", _wrap_ClientDisconnectedMessage_GetClientName}, 
    {0,0}
};
static swig_lua_attribute swig_ClientDisconnectedMessage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ClientDisconnectedMessage_bases[] = {0,0};
static const char *swig_ClientDisconnectedMessage_base_names[] = {"BaseMessage *",0};
static swig_lua_class _wrap_class_ClientDisconnectedMessage = { "ClientDisconnectedMessage", &SWIGTYPE_p_ClientDisconnectedMessage,_wrap_new_ClientDisconnectedMessage, swig_delete_ClientDisconnectedMessage, swig_ClientDisconnectedMessage_methods, swig_ClientDisconnectedMessage_attributes, swig_ClientDisconnectedMessage_bases, swig_ClientDisconnectedMessage_base_names };

static int _wrap_new_ClientDisconnectedMessagePtr(lua_State* L) {
  int SWIG_arg = 0;
  ClientDisconnectedMessage *arg1 = (ClientDisconnectedMessage *) 0 ;
  ClientDisconnectedMessagePtr *result = 0 ;
  
  SWIG_check_num_args("ClientDisconnectedMessagePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClientDisconnectedMessagePtr",1,"ClientDisconnectedMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClientDisconnectedMessage,0))){
    SWIG_fail_ptr("new_ClientDisconnectedMessagePtr",1,SWIGTYPE_p_ClientDisconnectedMessage);
  }
  
  result = (ClientDisconnectedMessagePtr *)new ClientDisconnectedMessagePtr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ClientDisconnectedMessagePtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ClientDisconnectedMessagePtr(void *obj) {
ClientDisconnectedMessagePtr *arg1 = (ClientDisconnectedMessagePtr *) obj;
delete arg1;
}
static swig_lua_method swig_ClientDisconnectedMessagePtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ClientDisconnectedMessagePtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ClientDisconnectedMessagePtr_bases[] = {0};
static const char *swig_ClientDisconnectedMessagePtr_base_names[] = {0};
static swig_lua_class _wrap_class_ClientDisconnectedMessagePtr = { "ClientDisconnectedMessagePtr", &SWIGTYPE_p_ClientDisconnectedMessagePtr,_wrap_new_ClientDisconnectedMessagePtr, swig_delete_ClientDisconnectedMessagePtr, swig_ClientDisconnectedMessagePtr_methods, swig_ClientDisconnectedMessagePtr_attributes, swig_ClientDisconnectedMessagePtr_bases, swig_ClientDisconnectedMessagePtr_base_names };

static int _wrap_new_ServerDisconnectedMessage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  SenderID arg3 ;
  double arg4 ;
  ServerDisconnectedMessage *result = 0 ;
  
  SWIG_check_num_args("ServerDisconnectedMessage",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ServerDisconnectedMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerDisconnectedMessage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ServerDisconnectedMessage",3,"SenderID");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ServerDisconnectedMessage",4,"double");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (SenderID)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (ServerDisconnectedMessage *)new ServerDisconnectedMessage(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerDisconnectedMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ServerDisconnectedMessage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  SenderID arg3 ;
  ServerDisconnectedMessage *result = 0 ;
  
  SWIG_check_num_args("ServerDisconnectedMessage",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ServerDisconnectedMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerDisconnectedMessage",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ServerDisconnectedMessage",3,"SenderID");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (SenderID)lua_tonumber(L, 3);
  result = (ServerDisconnectedMessage *)new ServerDisconnectedMessage(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerDisconnectedMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ServerDisconnectedMessage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  ServerDisconnectedMessage *result = 0 ;
  
  SWIG_check_num_args("ServerDisconnectedMessage",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ServerDisconnectedMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ServerDisconnectedMessage",2,"int");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  result = (ServerDisconnectedMessage *)new ServerDisconnectedMessage(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerDisconnectedMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ServerDisconnectedMessage(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ServerDisconnectedMessage__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ServerDisconnectedMessage__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ServerDisconnectedMessage__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ServerDisconnectedMessage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ServerDisconnectedMessage(std::string const,int,SenderID,double)\n"
    "    ServerDisconnectedMessage(std::string const,int,SenderID)\n"
    "    ServerDisconnectedMessage(std::string const,int)\n");
  lua_error(L);return 0;
}


static int _wrap_ServerDisconnectedMessage_GetServerName(lua_State* L) {
  int SWIG_arg = 0;
  ServerDisconnectedMessage *arg1 = (ServerDisconnectedMessage *) 0 ;
  std::string result;
  
  SWIG_check_num_args("GetServerName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetServerName",1,"ServerDisconnectedMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerDisconnectedMessage,0))){
    SWIG_fail_ptr("ServerDisconnectedMessage_GetServerName",1,SWIGTYPE_p_ServerDisconnectedMessage);
  }
  
  result = ((ServerDisconnectedMessage const *)arg1)->GetServerName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ServerDisconnectedMessage(void *obj) {
ServerDisconnectedMessage *arg1 = (ServerDisconnectedMessage *) obj;
delete arg1;
}
static swig_lua_method swig_ServerDisconnectedMessage_methods[] = {
    {"GetServerName", _wrap_ServerDisconnectedMessage_GetServerName}, 
    {0,0}
};
static swig_lua_attribute swig_ServerDisconnectedMessage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ServerDisconnectedMessage_bases[] = {0,0};
static const char *swig_ServerDisconnectedMessage_base_names[] = {"BaseMessage *",0};
static swig_lua_class _wrap_class_ServerDisconnectedMessage = { "ServerDisconnectedMessage", &SWIGTYPE_p_ServerDisconnectedMessage,_wrap_new_ServerDisconnectedMessage, swig_delete_ServerDisconnectedMessage, swig_ServerDisconnectedMessage_methods, swig_ServerDisconnectedMessage_attributes, swig_ServerDisconnectedMessage_bases, swig_ServerDisconnectedMessage_base_names };

static int _wrap_new_ServerDisconnectedMessagePtr(lua_State* L) {
  int SWIG_arg = 0;
  ServerDisconnectedMessage *arg1 = (ServerDisconnectedMessage *) 0 ;
  ServerDisconnectedMessagePtr *result = 0 ;
  
  SWIG_check_num_args("ServerDisconnectedMessagePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ServerDisconnectedMessagePtr",1,"ServerDisconnectedMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ServerDisconnectedMessage,0))){
    SWIG_fail_ptr("new_ServerDisconnectedMessagePtr",1,SWIGTYPE_p_ServerDisconnectedMessage);
  }
  
  result = (ServerDisconnectedMessagePtr *)new ServerDisconnectedMessagePtr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ServerDisconnectedMessagePtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ServerDisconnectedMessagePtr(void *obj) {
ServerDisconnectedMessagePtr *arg1 = (ServerDisconnectedMessagePtr *) obj;
delete arg1;
}
static swig_lua_method swig_ServerDisconnectedMessagePtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ServerDisconnectedMessagePtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ServerDisconnectedMessagePtr_bases[] = {0};
static const char *swig_ServerDisconnectedMessagePtr_base_names[] = {0};
static swig_lua_class _wrap_class_ServerDisconnectedMessagePtr = { "ServerDisconnectedMessagePtr", &SWIGTYPE_p_ServerDisconnectedMessagePtr,_wrap_new_ServerDisconnectedMessagePtr, swig_delete_ServerDisconnectedMessagePtr, swig_ServerDisconnectedMessagePtr_methods, swig_ServerDisconnectedMessagePtr_attributes, swig_ServerDisconnectedMessagePtr_bases, swig_ServerDisconnectedMessagePtr_base_names };

static int _wrap_new_PingRequestMessage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SenderID arg2 ;
  double arg3 ;
  PingRequestMessage *result = 0 ;
  
  SWIG_check_num_args("PingRequestMessage",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("PingRequestMessage",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PingRequestMessage",2,"SenderID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("PingRequestMessage",3,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (SenderID)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (PingRequestMessage *)new PingRequestMessage(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PingRequestMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PingRequestMessage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SenderID arg2 ;
  PingRequestMessage *result = 0 ;
  
  SWIG_check_num_args("PingRequestMessage",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("PingRequestMessage",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PingRequestMessage",2,"SenderID");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (SenderID)lua_tonumber(L, 2);
  result = (PingRequestMessage *)new PingRequestMessage(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PingRequestMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PingRequestMessage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  PingRequestMessage *result = 0 ;
  
  SWIG_check_num_args("PingRequestMessage",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("PingRequestMessage",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (PingRequestMessage *)new PingRequestMessage(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PingRequestMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PingRequestMessage(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_PingRequestMessage__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_PingRequestMessage__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_PingRequestMessage__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_PingRequestMessage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    PingRequestMessage(int,SenderID,double)\n"
    "    PingRequestMessage(int,SenderID)\n"
    "    PingRequestMessage(int)\n");
  lua_error(L);return 0;
}


static int _wrap_PingRequestMessage_GetServerPort(lua_State* L) {
  int SWIG_arg = 0;
  PingRequestMessage *arg1 = (PingRequestMessage *) 0 ;
  int result;
  
  SWIG_check_num_args("GetServerPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetServerPort",1,"PingRequestMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PingRequestMessage,0))){
    SWIG_fail_ptr("PingRequestMessage_GetServerPort",1,SWIGTYPE_p_PingRequestMessage);
  }
  
  result = (int)((PingRequestMessage const *)arg1)->GetServerPort();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PingRequestMessage(void *obj) {
PingRequestMessage *arg1 = (PingRequestMessage *) obj;
delete arg1;
}
static swig_lua_method swig_PingRequestMessage_methods[] = {
    {"GetServerPort", _wrap_PingRequestMessage_GetServerPort}, 
    {0,0}
};
static swig_lua_attribute swig_PingRequestMessage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_PingRequestMessage_bases[] = {0,0};
static const char *swig_PingRequestMessage_base_names[] = {"BaseMessage *",0};
static swig_lua_class _wrap_class_PingRequestMessage = { "PingRequestMessage", &SWIGTYPE_p_PingRequestMessage,_wrap_new_PingRequestMessage, swig_delete_PingRequestMessage, swig_PingRequestMessage_methods, swig_PingRequestMessage_attributes, swig_PingRequestMessage_bases, swig_PingRequestMessage_base_names };

static int _wrap_new_PingRequestMessagePtr(lua_State* L) {
  int SWIG_arg = 0;
  PingRequestMessage *arg1 = (PingRequestMessage *) 0 ;
  PingRequestMessagePtr *result = 0 ;
  
  SWIG_check_num_args("PingRequestMessagePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PingRequestMessagePtr",1,"PingRequestMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PingRequestMessage,0))){
    SWIG_fail_ptr("new_PingRequestMessagePtr",1,SWIGTYPE_p_PingRequestMessage);
  }
  
  result = (PingRequestMessagePtr *)new PingRequestMessagePtr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PingRequestMessagePtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PingRequestMessagePtr(void *obj) {
PingRequestMessagePtr *arg1 = (PingRequestMessagePtr *) obj;
delete arg1;
}
static swig_lua_method swig_PingRequestMessagePtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_PingRequestMessagePtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_PingRequestMessagePtr_bases[] = {0};
static const char *swig_PingRequestMessagePtr_base_names[] = {0};
static swig_lua_class _wrap_class_PingRequestMessagePtr = { "PingRequestMessagePtr", &SWIGTYPE_p_PingRequestMessagePtr,_wrap_new_PingRequestMessagePtr, swig_delete_PingRequestMessagePtr, swig_PingRequestMessagePtr_methods, swig_PingRequestMessagePtr_attributes, swig_PingRequestMessagePtr_bases, swig_PingRequestMessagePtr_base_names };

static int _wrap_new_StartSceanrioRequestMessage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  SenderID arg2 ;
  double arg3 ;
  StartSceanrioRequestMessage *result = 0 ;
  
  SWIG_check_num_args("StartSceanrioRequestMessage",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("StartSceanrioRequestMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StartSceanrioRequestMessage",2,"SenderID");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StartSceanrioRequestMessage",3,"double");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (SenderID)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (StartSceanrioRequestMessage *)new StartSceanrioRequestMessage(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StartSceanrioRequestMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StartSceanrioRequestMessage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  SenderID arg2 ;
  StartSceanrioRequestMessage *result = 0 ;
  
  SWIG_check_num_args("StartSceanrioRequestMessage",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("StartSceanrioRequestMessage",1,"std::string const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StartSceanrioRequestMessage",2,"SenderID");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  arg2 = (SenderID)lua_tonumber(L, 2);
  result = (StartSceanrioRequestMessage *)new StartSceanrioRequestMessage(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StartSceanrioRequestMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StartSceanrioRequestMessage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  StartSceanrioRequestMessage *result = 0 ;
  
  SWIG_check_num_args("StartSceanrioRequestMessage",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("StartSceanrioRequestMessage",1,"std::string const");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  result = (StartSceanrioRequestMessage *)new StartSceanrioRequestMessage(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StartSceanrioRequestMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StartSceanrioRequestMessage(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StartSceanrioRequestMessage__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_StartSceanrioRequestMessage__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_StartSceanrioRequestMessage__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_StartSceanrioRequestMessage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StartSceanrioRequestMessage(std::string const,SenderID,double)\n"
    "    StartSceanrioRequestMessage(std::string const,SenderID)\n"
    "    StartSceanrioRequestMessage(std::string const)\n");
  lua_error(L);return 0;
}


static int _wrap_StartSceanrioRequestMessage_GetScenarioName(lua_State* L) {
  int SWIG_arg = 0;
  StartSceanrioRequestMessage *arg1 = (StartSceanrioRequestMessage *) 0 ;
  std::string result;
  
  SWIG_check_num_args("GetScenarioName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetScenarioName",1,"StartSceanrioRequestMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartSceanrioRequestMessage,0))){
    SWIG_fail_ptr("StartSceanrioRequestMessage_GetScenarioName",1,SWIGTYPE_p_StartSceanrioRequestMessage);
  }
  
  result = ((StartSceanrioRequestMessage const *)arg1)->GetScenarioName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StartSceanrioRequestMessage(void *obj) {
StartSceanrioRequestMessage *arg1 = (StartSceanrioRequestMessage *) obj;
delete arg1;
}
static swig_lua_method swig_StartSceanrioRequestMessage_methods[] = {
    {"GetScenarioName", _wrap_StartSceanrioRequestMessage_GetScenarioName}, 
    {0,0}
};
static swig_lua_attribute swig_StartSceanrioRequestMessage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_StartSceanrioRequestMessage_bases[] = {0,0};
static const char *swig_StartSceanrioRequestMessage_base_names[] = {"BaseMessage *",0};
static swig_lua_class _wrap_class_StartSceanrioRequestMessage = { "StartSceanrioRequestMessage", &SWIGTYPE_p_StartSceanrioRequestMessage,_wrap_new_StartSceanrioRequestMessage, swig_delete_StartSceanrioRequestMessage, swig_StartSceanrioRequestMessage_methods, swig_StartSceanrioRequestMessage_attributes, swig_StartSceanrioRequestMessage_bases, swig_StartSceanrioRequestMessage_base_names };

static int _wrap_new_StartSceanrioRequestMessagePtr(lua_State* L) {
  int SWIG_arg = 0;
  StartSceanrioRequestMessage *arg1 = (StartSceanrioRequestMessage *) 0 ;
  StartSceanrioRequestMessagePtr *result = 0 ;
  
  SWIG_check_num_args("StartSceanrioRequestMessagePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartSceanrioRequestMessagePtr",1,"StartSceanrioRequestMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartSceanrioRequestMessage,0))){
    SWIG_fail_ptr("new_StartSceanrioRequestMessagePtr",1,SWIGTYPE_p_StartSceanrioRequestMessage);
  }
  
  result = (StartSceanrioRequestMessagePtr *)new StartSceanrioRequestMessagePtr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StartSceanrioRequestMessagePtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StartSceanrioRequestMessagePtr(void *obj) {
StartSceanrioRequestMessagePtr *arg1 = (StartSceanrioRequestMessagePtr *) obj;
delete arg1;
}
static swig_lua_method swig_StartSceanrioRequestMessagePtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_StartSceanrioRequestMessagePtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_StartSceanrioRequestMessagePtr_bases[] = {0};
static const char *swig_StartSceanrioRequestMessagePtr_base_names[] = {0};
static swig_lua_class _wrap_class_StartSceanrioRequestMessagePtr = { "StartSceanrioRequestMessagePtr", &SWIGTYPE_p_StartSceanrioRequestMessagePtr,_wrap_new_StartSceanrioRequestMessagePtr, swig_delete_StartSceanrioRequestMessagePtr, swig_StartSceanrioRequestMessagePtr_methods, swig_StartSceanrioRequestMessagePtr_attributes, swig_StartSceanrioRequestMessagePtr_bases, swig_StartSceanrioRequestMessagePtr_base_names };

static int _wrap_ToDebugPrintMessage(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< MessagePtr > arg1 ;
  MessagePtr *argp1 ;
  SwigValueWrapper< DebugPrintMessage > result;
  
  SWIG_check_num_args("ToDebugPrintMessage",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ToDebugPrintMessage",1,"MessagePtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_MessagePtr,0))){
    SWIG_fail_ptr("ToDebugPrintMessage",1,SWIGTYPE_p_MessagePtr);
  }
  arg1 = *argp1;
  
  result = ToDebugPrintMessage(arg1);
  {
    DebugPrintMessage * resultptr = new DebugPrintMessage((const DebugPrintMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DebugPrintMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToServerResponseMessage(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< MessagePtr > arg1 ;
  MessagePtr *argp1 ;
  SwigValueWrapper< ServerResponseMessage > result;
  
  SWIG_check_num_args("ToServerResponseMessage",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ToServerResponseMessage",1,"MessagePtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_MessagePtr,0))){
    SWIG_fail_ptr("ToServerResponseMessage",1,SWIGTYPE_p_MessagePtr);
  }
  arg1 = *argp1;
  
  result = ToServerResponseMessage(arg1);
  {
    ServerResponseMessage * resultptr = new ServerResponseMessage((const ServerResponseMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ServerResponseMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToClientConnectedMessage(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< MessagePtr > arg1 ;
  MessagePtr *argp1 ;
  SwigValueWrapper< ClientConnectedMessage > result;
  
  SWIG_check_num_args("ToClientConnectedMessage",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ToClientConnectedMessage",1,"MessagePtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_MessagePtr,0))){
    SWIG_fail_ptr("ToClientConnectedMessage",1,SWIGTYPE_p_MessagePtr);
  }
  arg1 = *argp1;
  
  result = ToClientConnectedMessage(arg1);
  {
    ClientConnectedMessage * resultptr = new ClientConnectedMessage((const ClientConnectedMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ClientConnectedMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToClientDisconnectedMessage(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< MessagePtr > arg1 ;
  MessagePtr *argp1 ;
  SwigValueWrapper< ClientDisconnectedMessage > result;
  
  SWIG_check_num_args("ToClientDisconnectedMessage",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ToClientDisconnectedMessage",1,"MessagePtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_MessagePtr,0))){
    SWIG_fail_ptr("ToClientDisconnectedMessage",1,SWIGTYPE_p_MessagePtr);
  }
  arg1 = *argp1;
  
  result = ToClientDisconnectedMessage(arg1);
  {
    ClientDisconnectedMessage * resultptr = new ClientDisconnectedMessage((const ClientDisconnectedMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ClientDisconnectedMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToServerDisconnectedMessage(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< MessagePtr > arg1 ;
  MessagePtr *argp1 ;
  SwigValueWrapper< ServerDisconnectedMessage > result;
  
  SWIG_check_num_args("ToServerDisconnectedMessage",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ToServerDisconnectedMessage",1,"MessagePtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_MessagePtr,0))){
    SWIG_fail_ptr("ToServerDisconnectedMessage",1,SWIGTYPE_p_MessagePtr);
  }
  arg1 = *argp1;
  
  result = ToServerDisconnectedMessage(arg1);
  {
    ServerDisconnectedMessage * resultptr = new ServerDisconnectedMessage((const ServerDisconnectedMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ServerDisconnectedMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SimEngine(lua_State* L) {
  int SWIG_arg = 0;
  SimEngine *result = 0 ;
  
  SWIG_check_num_args("SimEngine",0,0)
  result = (SimEngine *)new SimEngine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimEngine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimEngine_GetPtr(lua_State* L) {
  int SWIG_arg = 0;
  SimEngine *result = 0 ;
  
  SWIG_check_num_args("SimEngine::GetPtr",0,0)
  result = (SimEngine *)SimEngine::GetPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimEngine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimEngine_Get(lua_State* L) {
  int SWIG_arg = 0;
  SimEngine *result = 0 ;
  
  SWIG_check_num_args("SimEngine::Get",0,0)
  result = (SimEngine *) &SimEngine::Get();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimEngine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimEngine_GetSimSystemManager(lua_State* L) {
  int SWIG_arg = 0;
  SimEngine *arg1 = (SimEngine *) 0 ;
  SimSystemManagerPtr result;
  
  SWIG_check_num_args("GetSimSystemManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetSimSystemManager",1,"SimEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimEngine,0))){
    SWIG_fail_ptr("SimEngine_GetSimSystemManager",1,SWIGTYPE_p_SimEngine);
  }
  
  result = (arg1)->GetSimSystemManager();
  {
    SimSystemManagerPtr * resultptr = new SimSystemManagerPtr((const SimSystemManagerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimSystemManagerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SimEngine(void *obj) {
SimEngine *arg1 = (SimEngine *) obj;
delete arg1;
}
static swig_lua_method swig_SimEngine_methods[] = {
    {"GetSimSystemManager", _wrap_SimEngine_GetSimSystemManager}, 
    {0,0}
};
static swig_lua_attribute swig_SimEngine_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_SimEngine_bases[] = {0};
static const char *swig_SimEngine_base_names[] = {0};
static swig_lua_class _wrap_class_SimEngine = { "SimEngine", &SWIGTYPE_p_SimEngine,_wrap_new_SimEngine, swig_delete_SimEngine, swig_SimEngine_methods, swig_SimEngine_attributes, swig_SimEngine_bases, swig_SimEngine_base_names };

static int _wrap_SimSystemManager_PostMessage(lua_State* L) {
  int SWIG_arg = 0;
  SimSystemManager *arg1 = (SimSystemManager *) 0 ;
  SwigValueWrapper< MessagePtr > arg2 ;
  MessagePtr *argp2 ;
  
  SWIG_check_num_args("PostMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PostMessage",1,"SimSystemManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("PostMessage",2,"MessagePtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimSystemManager,0))){
    SWIG_fail_ptr("SimSystemManager_PostMessage",1,SWIGTYPE_p_SimSystemManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_MessagePtr,0))){
    SWIG_fail_ptr("SimSystemManager_PostMessage",2,SWIGTYPE_p_MessagePtr);
  }
  arg2 = *argp2;
  
  (arg1)->PostMessage(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimSystemManager_RegisterForSystemMessage(lua_State* L) {
  int SWIG_arg = 0;
  SimSystemManager *arg1 = (SimSystemManager *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< MessagePtr > arg3 ;
  std::string temp2 ;
  MessagePtr *argp3 ;
  
  SWIG_check_num_args("RegisterForSystemMessage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RegisterForSystemMessage",1,"SimSystemManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("RegisterForSystemMessage",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("RegisterForSystemMessage",3,"MessagePtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimSystemManager,0))){
    SWIG_fail_ptr("SimSystemManager_RegisterForSystemMessage",1,SWIGTYPE_p_SimSystemManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_MessagePtr,0))){
    SWIG_fail_ptr("SimSystemManager_RegisterForSystemMessage",3,SWIGTYPE_p_MessagePtr);
  }
  arg3 = *argp3;
  
  SimSystemManager_RegisterForSystemMessage(arg1,(std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SimSystemManager(lua_State* L) {
  int SWIG_arg = 0;
  SimSystemManager *result = 0 ;
  
  SWIG_check_num_args("SimSystemManager::SimSystemManager",0,0)
  result = (SimSystemManager *)new SimSystemManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimSystemManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SimSystemManager(void *obj) {
SimSystemManager *arg1 = (SimSystemManager *) obj;
delete arg1;
}
static swig_lua_method swig_SimSystemManager_methods[] = {
    {"PostMessage", _wrap_SimSystemManager_PostMessage}, 
    {"RegisterForSystemMessage", _wrap_SimSystemManager_RegisterForSystemMessage}, 
    {0,0}
};
static swig_lua_attribute swig_SimSystemManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_SimSystemManager_bases[] = {0};
static const char *swig_SimSystemManager_base_names[] = {0};
static swig_lua_class _wrap_class_SimSystemManager = { "SimSystemManager", &SWIGTYPE_p_SimSystemManager,_wrap_new_SimSystemManager, swig_delete_SimSystemManager, swig_SimSystemManager_methods, swig_SimSystemManager_attributes, swig_SimSystemManager_bases, swig_SimSystemManager_base_names };

static int _wrap_SimSystemManagerPtr_get(lua_State* L) {
  int SWIG_arg = 0;
  SimSystemManagerPtr *arg1 = (SimSystemManagerPtr *) 0 ;
  SimSystemManager *result = 0 ;
  
  SWIG_check_num_args("get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("get",1,"SimSystemManagerPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimSystemManagerPtr,0))){
    SWIG_fail_ptr("SimSystemManagerPtr_get",1,SWIGTYPE_p_SimSystemManagerPtr);
  }
  
  result = (SimSystemManager *)(arg1)->get();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimSystemManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SimSystemManagerPtr(lua_State* L) {
  int SWIG_arg = 0;
  SimSystemManagerPtr *result = 0 ;
  
  SWIG_check_num_args("SimSystemManagerPtr::SimSystemManagerPtr",0,0)
  result = (SimSystemManagerPtr *)new SimSystemManagerPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimSystemManagerPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SimSystemManagerPtr(void *obj) {
SimSystemManagerPtr *arg1 = (SimSystemManagerPtr *) obj;
delete arg1;
}
static swig_lua_method swig_SimSystemManagerPtr_methods[] = {
    {"get", _wrap_SimSystemManagerPtr_get}, 
    {0,0}
};
static swig_lua_attribute swig_SimSystemManagerPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_SimSystemManagerPtr_bases[] = {0};
static const char *swig_SimSystemManagerPtr_base_names[] = {0};
static swig_lua_class _wrap_class_SimSystemManagerPtr = { "SimSystemManagerPtr", &SWIGTYPE_p_SimSystemManagerPtr,_wrap_new_SimSystemManagerPtr, swig_delete_SimSystemManagerPtr, swig_SimSystemManagerPtr_methods, swig_SimSystemManagerPtr_attributes, swig_SimSystemManagerPtr_bases, swig_SimSystemManagerPtr_base_names };

static int _wrap_new_LuaScriptManager(lua_State* L) {
  int SWIG_arg = 0;
  LuaScriptManager *result = 0 ;
  
  SWIG_check_num_args("LuaScriptManager",0,0)
  result = (LuaScriptManager *)new LuaScriptManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaScriptManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaScriptManager_GetPtr(lua_State* L) {
  int SWIG_arg = 0;
  LuaScriptManager *result = 0 ;
  
  SWIG_check_num_args("LuaScriptManager::GetPtr",0,0)
  result = (LuaScriptManager *)LuaScriptManager::GetPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaScriptManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaScriptManager_Get(lua_State* L) {
  int SWIG_arg = 0;
  LuaScriptManager *result = 0 ;
  
  SWIG_check_num_args("LuaScriptManager::Get",0,0)
  result = (LuaScriptManager *) &LuaScriptManager::Get();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaScriptManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaScriptManager_RegisterForSystemMessage(lua_State* L) {
  int SWIG_arg = 0;
  LuaScriptManager *arg1 = (LuaScriptManager *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< MessagePtr > arg3 ;
  std::string temp2 ;
  MessagePtr *argp3 ;
  
  SWIG_check_num_args("RegisterForSystemMessage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RegisterForSystemMessage",1,"LuaScriptManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("RegisterForSystemMessage",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("RegisterForSystemMessage",3,"MessagePtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaScriptManager,0))){
    SWIG_fail_ptr("LuaScriptManager_RegisterForSystemMessage",1,SWIGTYPE_p_LuaScriptManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_MessagePtr,0))){
    SWIG_fail_ptr("LuaScriptManager_RegisterForSystemMessage",3,SWIGTYPE_p_MessagePtr);
  }
  arg3 = *argp3;
  
  (arg1)->RegisterForSystemMessage((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaScriptManager(void *obj) {
LuaScriptManager *arg1 = (LuaScriptManager *) obj;
delete arg1;
}
static swig_lua_method swig_LuaScriptManager_methods[] = {
    {"RegisterForSystemMessage", _wrap_LuaScriptManager_RegisterForSystemMessage}, 
    {0,0}
};
static swig_lua_attribute swig_LuaScriptManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_LuaScriptManager_bases[] = {0};
static const char *swig_LuaScriptManager_base_names[] = {0};
static swig_lua_class _wrap_class_LuaScriptManager = { "LuaScriptManager", &SWIGTYPE_p_LuaScriptManager,_wrap_new_LuaScriptManager, swig_delete_LuaScriptManager, swig_LuaScriptManager_methods, swig_LuaScriptManager_attributes, swig_LuaScriptManager_bases, swig_LuaScriptManager_base_names };


   SWIGEXPORT void swig_new_message_ptr(lua_State* L, MessagePtr* message)
		{
		SWIG_NewPointerObj(L,message,SWIGTYPE_p_MessagePtr,0);
		}

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "ToDebugPrintMessage", _wrap_ToDebugPrintMessage},
    { "ToServerResponseMessage", _wrap_ToServerResponseMessage},
    { "ToClientConnectedMessage", _wrap_ToClientConnectedMessage},
    { "ToClientDisconnectedMessage", _wrap_ToClientDisconnectedMessage},
    { "ToServerDisconnectedMessage", _wrap_ToServerDisconnectedMessage},
    { "SimEngine_GetPtr", _wrap_SimEngine_GetPtr},
    { "SimEngine_Get", _wrap_SimEngine_Get},
    { "LuaScriptManager_GetPtr", _wrap_LuaScriptManager_GetPtr},
    { "LuaScriptManager_Get", _wrap_LuaScriptManager_Get},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "Vec3_m_UnitX", _wrap_Vec3_m_UnitX_get, _wrap_Vec3_m_UnitX_set },
    { "Vec3_m_UnitY", _wrap_Vec3_m_UnitY_get, _wrap_Vec3_m_UnitY_set },
    { "Vec3_m_UnitZ", _wrap_Vec3_m_UnitZ_get, _wrap_Vec3_m_UnitZ_set },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_DebugPrintMessageTo_p_BaseMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseMessage *)  ((DebugPrintMessage *) x));
}
static void *_p_ClientConnectedMessageTo_p_BaseMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseMessage *)  ((ClientConnectedMessage *) x));
}
static void *_p_StartServerMessageTo_p_BaseMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseMessage *)  ((StartServerMessage *) x));
}
static void *_p_StopServerMessageTo_p_BaseMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseMessage *)  ((StopServerMessage *) x));
}
static void *_p_StartClientMessageTo_p_BaseMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseMessage *)  ((StartClientMessage *) x));
}
static void *_p_StopClientMessageTo_p_BaseMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseMessage *)  ((StopClientMessage *) x));
}
static void *_p_ServerResponseMessageTo_p_BaseMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseMessage *)  ((ServerResponseMessage *) x));
}
static void *_p_ConnectToServerMessageTo_p_BaseMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseMessage *)  ((ConnectToServerMessage *) x));
}
static void *_p_ClientDisconnectedMessageTo_p_BaseMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseMessage *)  ((ClientDisconnectedMessage *) x));
}
static void *_p_ServerDisconnectedMessageTo_p_BaseMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseMessage *)  ((ServerDisconnectedMessage *) x));
}
static void *_p_PingRequestMessageTo_p_BaseMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseMessage *)  ((PingRequestMessage *) x));
}
static void *_p_StartSceanrioRequestMessageTo_p_BaseMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseMessage *)  ((StartSceanrioRequestMessage *) x));
}
static void *_p_BaseMessageTo_p_IMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMessage *)  ((BaseMessage *) x));
}
static void *_p_DebugPrintMessageTo_p_IMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMessage *) (BaseMessage *) ((DebugPrintMessage *) x));
}
static void *_p_ClientConnectedMessageTo_p_IMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMessage *) (BaseMessage *) ((ClientConnectedMessage *) x));
}
static void *_p_StartServerMessageTo_p_IMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMessage *) (BaseMessage *) ((StartServerMessage *) x));
}
static void *_p_StopServerMessageTo_p_IMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMessage *) (BaseMessage *) ((StopServerMessage *) x));
}
static void *_p_StartClientMessageTo_p_IMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMessage *) (BaseMessage *) ((StartClientMessage *) x));
}
static void *_p_StopClientMessageTo_p_IMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMessage *) (BaseMessage *) ((StopClientMessage *) x));
}
static void *_p_ServerResponseMessageTo_p_IMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMessage *) (BaseMessage *) ((ServerResponseMessage *) x));
}
static void *_p_ConnectToServerMessageTo_p_IMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMessage *) (BaseMessage *) ((ConnectToServerMessage *) x));
}
static void *_p_ClientDisconnectedMessageTo_p_IMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMessage *) (BaseMessage *) ((ClientDisconnectedMessage *) x));
}
static void *_p_ServerDisconnectedMessageTo_p_IMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMessage *) (BaseMessage *) ((ServerDisconnectedMessage *) x));
}
static void *_p_PingRequestMessageTo_p_IMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMessage *) (BaseMessage *) ((PingRequestMessage *) x));
}
static void *_p_StartSceanrioRequestMessageTo_p_IMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IMessage *) (BaseMessage *) ((StartSceanrioRequestMessage *) x));
}
static swig_type_info _swigt__p_BaseMessage = {"_p_BaseMessage", "BaseMessage *", 0, 0, (void*)&_wrap_class_BaseMessage, 0};
static swig_type_info _swigt__p_ClientConnectedMessage = {"_p_ClientConnectedMessage", "ClientConnectedMessage *", 0, 0, (void*)&_wrap_class_ClientConnectedMessage, 0};
static swig_type_info _swigt__p_ClientConnectedMessagePtr = {"_p_ClientConnectedMessagePtr", "ClientConnectedMessagePtr *", 0, 0, (void*)&_wrap_class_ClientConnectedMessagePtr, 0};
static swig_type_info _swigt__p_ClientDisconnectedMessage = {"_p_ClientDisconnectedMessage", "ClientDisconnectedMessage *", 0, 0, (void*)&_wrap_class_ClientDisconnectedMessage, 0};
static swig_type_info _swigt__p_ClientDisconnectedMessagePtr = {"_p_ClientDisconnectedMessagePtr", "ClientDisconnectedMessagePtr *", 0, 0, (void*)&_wrap_class_ClientDisconnectedMessagePtr, 0};
static swig_type_info _swigt__p_ConnectToServerMessage = {"_p_ConnectToServerMessage", "ConnectToServerMessage *", 0, 0, (void*)&_wrap_class_ConnectToServerMessage, 0};
static swig_type_info _swigt__p_ConnectToServerMessagePtr = {"_p_ConnectToServerMessagePtr", "ConnectToServerMessagePtr *", 0, 0, (void*)&_wrap_class_ConnectToServerMessagePtr, 0};
static swig_type_info _swigt__p_DebugPrintMessage = {"_p_DebugPrintMessage", "DebugPrintMessage *", 0, 0, (void*)&_wrap_class_DebugPrintMessage, 0};
static swig_type_info _swigt__p_DebugPrintMessagePtr = {"_p_DebugPrintMessagePtr", "DebugPrintMessagePtr *", 0, 0, (void*)&_wrap_class_DebugPrintMessagePtr, 0};
static swig_type_info _swigt__p_IMessage = {"_p_IMessage", "IMessage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LuaScriptManager = {"_p_LuaScriptManager", "LuaScriptManager *", 0, 0, (void*)&_wrap_class_LuaScriptManager, 0};
static swig_type_info _swigt__p_MessagePtr = {"_p_MessagePtr", "MessagePtr *", 0, 0, (void*)&_wrap_class_MessagePtr, 0};
static swig_type_info _swigt__p_PingRequestMessage = {"_p_PingRequestMessage", "PingRequestMessage *", 0, 0, (void*)&_wrap_class_PingRequestMessage, 0};
static swig_type_info _swigt__p_PingRequestMessagePtr = {"_p_PingRequestMessagePtr", "PingRequestMessagePtr *", 0, 0, (void*)&_wrap_class_PingRequestMessagePtr, 0};
static swig_type_info _swigt__p_ServerDisconnectedMessage = {"_p_ServerDisconnectedMessage", "ServerDisconnectedMessage *", 0, 0, (void*)&_wrap_class_ServerDisconnectedMessage, 0};
static swig_type_info _swigt__p_ServerDisconnectedMessagePtr = {"_p_ServerDisconnectedMessagePtr", "ServerDisconnectedMessagePtr *", 0, 0, (void*)&_wrap_class_ServerDisconnectedMessagePtr, 0};
static swig_type_info _swigt__p_ServerResponseMessage = {"_p_ServerResponseMessage", "ServerResponseMessage *", 0, 0, (void*)&_wrap_class_ServerResponseMessage, 0};
static swig_type_info _swigt__p_ServerResponseMessagePtr = {"_p_ServerResponseMessagePtr", "ServerResponseMessagePtr *", 0, 0, (void*)&_wrap_class_ServerResponseMessagePtr, 0};
static swig_type_info _swigt__p_SimEngine = {"_p_SimEngine", "SimEngine *", 0, 0, (void*)&_wrap_class_SimEngine, 0};
static swig_type_info _swigt__p_SimSystemManager = {"_p_SimSystemManager", "SimSystemManager *", 0, 0, (void*)&_wrap_class_SimSystemManager, 0};
static swig_type_info _swigt__p_SimSystemManagerPtr = {"_p_SimSystemManagerPtr", "SimSystemManagerPtr *", 0, 0, (void*)&_wrap_class_SimSystemManagerPtr, 0};
static swig_type_info _swigt__p_StartClientMessage = {"_p_StartClientMessage", "StartClientMessage *", 0, 0, (void*)&_wrap_class_StartClientMessage, 0};
static swig_type_info _swigt__p_StartClientMessagePtr = {"_p_StartClientMessagePtr", "StartClientMessagePtr *", 0, 0, (void*)&_wrap_class_StartClientMessagePtr, 0};
static swig_type_info _swigt__p_StartSceanrioRequestMessage = {"_p_StartSceanrioRequestMessage", "StartSceanrioRequestMessage *", 0, 0, (void*)&_wrap_class_StartSceanrioRequestMessage, 0};
static swig_type_info _swigt__p_StartSceanrioRequestMessagePtr = {"_p_StartSceanrioRequestMessagePtr", "StartSceanrioRequestMessagePtr *", 0, 0, (void*)&_wrap_class_StartSceanrioRequestMessagePtr, 0};
static swig_type_info _swigt__p_StartServerMessage = {"_p_StartServerMessage", "StartServerMessage *", 0, 0, (void*)&_wrap_class_StartServerMessage, 0};
static swig_type_info _swigt__p_StartServerMessagePtr = {"_p_StartServerMessagePtr", "StartServerMessagePtr *", 0, 0, (void*)&_wrap_class_StartServerMessagePtr, 0};
static swig_type_info _swigt__p_StopClientMessage = {"_p_StopClientMessage", "StopClientMessage *", 0, 0, (void*)&_wrap_class_StopClientMessage, 0};
static swig_type_info _swigt__p_StopClientMessagePtr = {"_p_StopClientMessagePtr", "StopClientMessagePtr *", 0, 0, (void*)&_wrap_class_StopClientMessagePtr, 0};
static swig_type_info _swigt__p_StopServerMessage = {"_p_StopServerMessage", "StopServerMessage *", 0, 0, (void*)&_wrap_class_StopServerMessage, 0};
static swig_type_info _swigt__p_StopServerMessagePtr = {"_p_StopServerMessagePtr", "StopServerMessagePtr *", 0, 0, (void*)&_wrap_class_StopServerMessagePtr, 0};
static swig_type_info _swigt__p_Vec3 = {"_p_Vec3", "Vec3 *", 0, 0, (void*)&_wrap_class_Vec3, 0};
static swig_type_info _swigt__p_double = {"_p_double", "Float *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|SenderID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_std_string, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BaseMessage,
  &_swigt__p_ClientConnectedMessage,
  &_swigt__p_ClientConnectedMessagePtr,
  &_swigt__p_ClientDisconnectedMessage,
  &_swigt__p_ClientDisconnectedMessagePtr,
  &_swigt__p_ConnectToServerMessage,
  &_swigt__p_ConnectToServerMessagePtr,
  &_swigt__p_DebugPrintMessage,
  &_swigt__p_DebugPrintMessagePtr,
  &_swigt__p_IMessage,
  &_swigt__p_LuaScriptManager,
  &_swigt__p_MessagePtr,
  &_swigt__p_PingRequestMessage,
  &_swigt__p_PingRequestMessagePtr,
  &_swigt__p_ServerDisconnectedMessage,
  &_swigt__p_ServerDisconnectedMessagePtr,
  &_swigt__p_ServerResponseMessage,
  &_swigt__p_ServerResponseMessagePtr,
  &_swigt__p_SimEngine,
  &_swigt__p_SimSystemManager,
  &_swigt__p_SimSystemManagerPtr,
  &_swigt__p_StartClientMessage,
  &_swigt__p_StartClientMessagePtr,
  &_swigt__p_StartSceanrioRequestMessage,
  &_swigt__p_StartSceanrioRequestMessagePtr,
  &_swigt__p_StartServerMessage,
  &_swigt__p_StartServerMessagePtr,
  &_swigt__p_StopClientMessage,
  &_swigt__p_StopClientMessagePtr,
  &_swigt__p_StopServerMessage,
  &_swigt__p_StopServerMessagePtr,
  &_swigt__p_Vec3,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_std__string,
};

static swig_cast_info _swigc__p_BaseMessage[] = {  {&_swigt__p_BaseMessage, 0, 0, 0},  {&_swigt__p_DebugPrintMessage, _p_DebugPrintMessageTo_p_BaseMessage, 0, 0},  {&_swigt__p_ClientConnectedMessage, _p_ClientConnectedMessageTo_p_BaseMessage, 0, 0},  {&_swigt__p_StartServerMessage, _p_StartServerMessageTo_p_BaseMessage, 0, 0},  {&_swigt__p_StopServerMessage, _p_StopServerMessageTo_p_BaseMessage, 0, 0},  {&_swigt__p_StartClientMessage, _p_StartClientMessageTo_p_BaseMessage, 0, 0},  {&_swigt__p_StopClientMessage, _p_StopClientMessageTo_p_BaseMessage, 0, 0},  {&_swigt__p_ServerResponseMessage, _p_ServerResponseMessageTo_p_BaseMessage, 0, 0},  {&_swigt__p_ConnectToServerMessage, _p_ConnectToServerMessageTo_p_BaseMessage, 0, 0},  {&_swigt__p_ClientDisconnectedMessage, _p_ClientDisconnectedMessageTo_p_BaseMessage, 0, 0},  {&_swigt__p_ServerDisconnectedMessage, _p_ServerDisconnectedMessageTo_p_BaseMessage, 0, 0},  {&_swigt__p_PingRequestMessage, _p_PingRequestMessageTo_p_BaseMessage, 0, 0},  {&_swigt__p_StartSceanrioRequestMessage, _p_StartSceanrioRequestMessageTo_p_BaseMessage, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ClientConnectedMessage[] = {  {&_swigt__p_ClientConnectedMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ClientConnectedMessagePtr[] = {  {&_swigt__p_ClientConnectedMessagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ClientDisconnectedMessage[] = {  {&_swigt__p_ClientDisconnectedMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ClientDisconnectedMessagePtr[] = {  {&_swigt__p_ClientDisconnectedMessagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConnectToServerMessage[] = {  {&_swigt__p_ConnectToServerMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConnectToServerMessagePtr[] = {  {&_swigt__p_ConnectToServerMessagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DebugPrintMessage[] = {  {&_swigt__p_DebugPrintMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DebugPrintMessagePtr[] = {  {&_swigt__p_DebugPrintMessagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMessage[] = {  {&_swigt__p_BaseMessage, _p_BaseMessageTo_p_IMessage, 0, 0},  {&_swigt__p_DebugPrintMessage, _p_DebugPrintMessageTo_p_IMessage, 0, 0},  {&_swigt__p_ClientConnectedMessage, _p_ClientConnectedMessageTo_p_IMessage, 0, 0},  {&_swigt__p_StartServerMessage, _p_StartServerMessageTo_p_IMessage, 0, 0},  {&_swigt__p_StopServerMessage, _p_StopServerMessageTo_p_IMessage, 0, 0},  {&_swigt__p_StartClientMessage, _p_StartClientMessageTo_p_IMessage, 0, 0},  {&_swigt__p_StopClientMessage, _p_StopClientMessageTo_p_IMessage, 0, 0},  {&_swigt__p_ServerResponseMessage, _p_ServerResponseMessageTo_p_IMessage, 0, 0},  {&_swigt__p_ConnectToServerMessage, _p_ConnectToServerMessageTo_p_IMessage, 0, 0},  {&_swigt__p_ClientDisconnectedMessage, _p_ClientDisconnectedMessageTo_p_IMessage, 0, 0},  {&_swigt__p_ServerDisconnectedMessage, _p_ServerDisconnectedMessageTo_p_IMessage, 0, 0},  {&_swigt__p_PingRequestMessage, _p_PingRequestMessageTo_p_IMessage, 0, 0},  {&_swigt__p_StartSceanrioRequestMessage, _p_StartSceanrioRequestMessageTo_p_IMessage, 0, 0},  {&_swigt__p_IMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaScriptManager[] = {  {&_swigt__p_LuaScriptManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MessagePtr[] = {  {&_swigt__p_MessagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PingRequestMessage[] = {  {&_swigt__p_PingRequestMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PingRequestMessagePtr[] = {  {&_swigt__p_PingRequestMessagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ServerDisconnectedMessage[] = {  {&_swigt__p_ServerDisconnectedMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ServerDisconnectedMessagePtr[] = {  {&_swigt__p_ServerDisconnectedMessagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ServerResponseMessage[] = {  {&_swigt__p_ServerResponseMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ServerResponseMessagePtr[] = {  {&_swigt__p_ServerResponseMessagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimEngine[] = {  {&_swigt__p_SimEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimSystemManager[] = {  {&_swigt__p_SimSystemManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimSystemManagerPtr[] = {  {&_swigt__p_SimSystemManagerPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StartClientMessage[] = {  {&_swigt__p_StartClientMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StartClientMessagePtr[] = {  {&_swigt__p_StartClientMessagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StartSceanrioRequestMessage[] = {  {&_swigt__p_StartSceanrioRequestMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StartSceanrioRequestMessagePtr[] = {  {&_swigt__p_StartSceanrioRequestMessagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StartServerMessage[] = {  {&_swigt__p_StartServerMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StartServerMessagePtr[] = {  {&_swigt__p_StartServerMessagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StopClientMessage[] = {  {&_swigt__p_StopClientMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StopClientMessagePtr[] = {  {&_swigt__p_StopClientMessagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StopServerMessage[] = {  {&_swigt__p_StopServerMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StopServerMessagePtr[] = {  {&_swigt__p_StopServerMessagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec3[] = {  {&_swigt__p_Vec3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BaseMessage,
  _swigc__p_ClientConnectedMessage,
  _swigc__p_ClientConnectedMessagePtr,
  _swigc__p_ClientDisconnectedMessage,
  _swigc__p_ClientDisconnectedMessagePtr,
  _swigc__p_ConnectToServerMessage,
  _swigc__p_ConnectToServerMessagePtr,
  _swigc__p_DebugPrintMessage,
  _swigc__p_DebugPrintMessagePtr,
  _swigc__p_IMessage,
  _swigc__p_LuaScriptManager,
  _swigc__p_MessagePtr,
  _swigc__p_PingRequestMessage,
  _swigc__p_PingRequestMessagePtr,
  _swigc__p_ServerDisconnectedMessage,
  _swigc__p_ServerDisconnectedMessagePtr,
  _swigc__p_ServerResponseMessage,
  _swigc__p_ServerResponseMessagePtr,
  _swigc__p_SimEngine,
  _swigc__p_SimSystemManager,
  _swigc__p_SimSystemManagerPtr,
  _swigc__p_StartClientMessage,
  _swigc__p_StartClientMessagePtr,
  _swigc__p_StartSceanrioRequestMessage,
  _swigc__p_StartSceanrioRequestMessagePtr,
  _swigc__p_StartServerMessage,
  _swigc__p_StartServerMessagePtr,
  _swigc__p_StopClientMessage,
  _swigc__p_StopClientMessagePtr,
  _swigc__p_StopServerMessage,
  _swigc__p_StopServerMessagePtr,
  _swigc__p_Vec3,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_std__string,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

